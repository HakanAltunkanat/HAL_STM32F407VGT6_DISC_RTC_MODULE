
HAL_RTC_MODULE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003824  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800419c  0800419c  0000519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a4  080041a4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a4  080041a4  000051a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080041ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000610  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000066c  2000066c  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000977f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b90  00000000  00000000  0000f80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  000113a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006fc  00000000  00000000  00011cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215cb  00000000  00000000  000123d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb8d  00000000  00000000  0003399f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c994f  00000000  00000000  0004052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109e7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a34  00000000  00000000  00109ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0010c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800399c 	.word	0x0800399c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800399c 	.word	0x0800399c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <get_rtc_time>:

/**
 * @brief Retrieves the current time from the RTC and assigns it to global variables.
 */
void get_rtc_time()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

    // Get the current time from the RTC
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	4619      	mov	r1, r3
 800057a:	4808      	ldr	r0, [pc, #32]	@ (800059c <get_rtc_time+0x3c>)
 800057c:	f002 fb7f 	bl	8002c7e <HAL_RTC_GetTime>

    // Assign the retrieved time to global variables
    second = sTime.Seconds;
 8000580:	79ba      	ldrb	r2, [r7, #6]
 8000582:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <get_rtc_time+0x40>)
 8000584:	701a      	strb	r2, [r3, #0]
    minute = sTime.Minutes;
 8000586:	797a      	ldrb	r2, [r7, #5]
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <get_rtc_time+0x44>)
 800058a:	701a      	strb	r2, [r3, #0]
    hour = sTime.Hours;
 800058c:	793a      	ldrb	r2, [r7, #4]
 800058e:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <get_rtc_time+0x48>)
 8000590:	701a      	strb	r2, [r3, #0]
}
 8000592:	bf00      	nop
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000cc 	.word	0x200000cc
 80005a0:	200000ef 	.word	0x200000ef
 80005a4:	200000f0 	.word	0x200000f0
 80005a8:	200000f1 	.word	0x200000f1

080005ac <get_rtc_date>:

/**
 * @brief Retrieves the current date from the RTC and assigns it to global variables.
 */
void get_rtc_date()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate;

    // Get the current date from the RTC
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	4619      	mov	r1, r3
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <get_rtc_date+0x2c>)
 80005ba:	f002 fc42 	bl	8002e42 <HAL_RTC_GetDate>

    // Assign the retrieved date to global variables
    day = sDate.Date;
 80005be:	79ba      	ldrb	r2, [r7, #6]
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <get_rtc_date+0x30>)
 80005c2:	701a      	strb	r2, [r3, #0]
    month = sDate.Month;
 80005c4:	797a      	ldrb	r2, [r7, #5]
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <get_rtc_date+0x34>)
 80005c8:	701a      	strb	r2, [r3, #0]
    year = sDate.Year;
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <get_rtc_date+0x38>)
 80005ce:	701a      	strb	r2, [r3, #0]
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000cc 	.word	0x200000cc
 80005dc:	200000ec 	.word	0x200000ec
 80005e0:	200000ed 	.word	0x200000ed
 80005e4:	200000ee 	.word	0x200000ee

080005e8 <oled_display>:

/**
 * @brief Displays the time and date on the OLED screen.
 */
void oled_display()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af02      	add	r7, sp, #8
    // Format the time and store it in the time array
    sprintf(time, "%02u:%02u:%02u", hour, minute, second);
 80005ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <oled_display+0x78>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <oled_display+0x7c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <oled_display+0x80>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	460b      	mov	r3, r1
 8000602:	491a      	ldr	r1, [pc, #104]	@ (800066c <oled_display+0x84>)
 8000604:	481a      	ldr	r0, [pc, #104]	@ (8000670 <oled_display+0x88>)
 8000606:	f002 fd29 	bl	800305c <siprintf>

    // Display the time on the OLED screen
    ssd1306_SetCursor(30, 20);
 800060a:	2114      	movs	r1, #20
 800060c:	201e      	movs	r0, #30
 800060e:	f000 fca3 	bl	8000f58 <ssd1306_SetCursor>
    ssd1306_WriteString(time, Font_7x10, Black);
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <oled_display+0x8c>)
 8000614:	2200      	movs	r2, #0
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800061a:	4815      	ldr	r0, [pc, #84]	@ (8000670 <oled_display+0x88>)
 800061c:	f000 fc76 	bl	8000f0c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000620:	f000 fb68 	bl	8000cf4 <ssd1306_UpdateScreen>

    // Format the date and store it in the date array
    sprintf(date, "%02u:%02u:20%02u", day, month, year);
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <oled_display+0x90>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <oled_display+0x94>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <oled_display+0x98>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	460b      	mov	r3, r1
 8000638:	4912      	ldr	r1, [pc, #72]	@ (8000684 <oled_display+0x9c>)
 800063a:	4813      	ldr	r0, [pc, #76]	@ (8000688 <oled_display+0xa0>)
 800063c:	f002 fd0e 	bl	800305c <siprintf>

    // Display the date on the OLED screen
    ssd1306_SetCursor(30, 35);
 8000640:	2123      	movs	r1, #35	@ 0x23
 8000642:	201e      	movs	r0, #30
 8000644:	f000 fc88 	bl	8000f58 <ssd1306_SetCursor>
    ssd1306_WriteString(date, Font_7x10, Black);
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <oled_display+0x8c>)
 800064a:	2200      	movs	r2, #0
 800064c:	9200      	str	r2, [sp, #0]
 800064e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <oled_display+0xa0>)
 8000652:	f000 fc5b 	bl	8000f0c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000656:	f000 fb4d 	bl	8000cf4 <ssd1306_UpdateScreen>
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000f1 	.word	0x200000f1
 8000664:	200000f0 	.word	0x200000f0
 8000668:	200000ef 	.word	0x200000ef
 800066c:	080039b4 	.word	0x080039b4
 8000670:	200000f4 	.word	0x200000f4
 8000674:	0800415c 	.word	0x0800415c
 8000678:	200000ec 	.word	0x200000ec
 800067c:	200000ed 	.word	0x200000ed
 8000680:	200000ee 	.word	0x200000ee
 8000684:	080039c4 	.word	0x080039c4
 8000688:	20000104 	.word	0x20000104

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fcac 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f816 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f906 	bl	80008a8 <MX_GPIO_Init>
  MX_RTC_Init();
 800069c:	f000 f8aa 	bl	80007f4 <MX_RTC_Init>
  MX_I2C1_Init();
 80006a0:	f000 f87a 	bl	8000798 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80006a4:	f000 faa4 	bl	8000bf0 <ssd1306_Init>
  ssd1306_Fill(White);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fb0b 	bl	8000cc4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80006ae:	f000 fb21 	bl	8000cf4 <ssd1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_rtc_time();
 80006b2:	f7ff ff55 	bl	8000560 <get_rtc_time>
	  get_rtc_date();
 80006b6:	f7ff ff79 	bl	80005ac <get_rtc_date>
	  oled_display();
 80006ba:	f7ff ff95 	bl	80005e8 <oled_display>
	  get_rtc_time();
 80006be:	bf00      	nop
 80006c0:	e7f7      	b.n	80006b2 <main+0x26>
	...

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fce2 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	@ (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000738:	23a8      	movs	r3, #168	@ 0xa8
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fc15 	bl	8001f78 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f8d0 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2105      	movs	r1, #5
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fe76 	bl	8002468 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f8b9 	bl	80008f8 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_I2C1_Init+0x50>)
 800079e:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <MX_I2C1_Init+0x54>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007a4:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_I2C1_Init+0x58>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007d6:	f000 ff21 	bl	800161c <HAL_I2C_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e0:	f000 f88a 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000078 	.word	0x20000078
 80007ec:	40005400 	.word	0x40005400
 80007f0:	000186a0 	.word	0x000186a0

080007f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <MX_RTC_Init+0xac>)
 800080e:	4a25      	ldr	r2, [pc, #148]	@ (80008a4 <MX_RTC_Init+0xb0>)
 8000810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_RTC_Init+0xac>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_RTC_Init+0xac>)
 800081a:	2263      	movs	r2, #99	@ 0x63
 800081c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3999;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_RTC_Init+0xac>)
 8000820:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000824:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_RTC_Init+0xac>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_RTC_Init+0xac>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_RTC_Init+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000838:	4819      	ldr	r0, [pc, #100]	@ (80008a0 <MX_RTC_Init+0xac>)
 800083a:	f002 f903 	bl	8002a44 <HAL_RTC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000844:	f000 f858 	bl	80008f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 14;
 8000848:	230e      	movs	r3, #14
 800084a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 32;
 800084c:	2320      	movs	r3, #32
 800084e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	480f      	ldr	r0, [pc, #60]	@ (80008a0 <MX_RTC_Init+0xac>)
 8000864:	f002 f971 	bl	8002b4a <HAL_RTC_SetTime>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800086e:	f000 f843 	bl	80008f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000872:	2302      	movs	r3, #2
 8000874:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000876:	2308      	movs	r3, #8
 8000878:	707b      	strb	r3, [r7, #1]
  sDate.Date = 27;
 800087a:	231b      	movs	r3, #27
 800087c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 800087e:	2318      	movs	r3, #24
 8000880:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_RTC_Init+0xac>)
 800088a:	f002 fa56 	bl	8002d3a <HAL_RTC_SetDate>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000894:	f000 f830 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000cc 	.word	0x200000cc
 80008a4:	40002800 	.word	0x40002800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_GPIO_Init+0x4c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <MX_GPIO_Init+0x4c>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_GPIO_Init+0x4c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_GPIO_Init+0x4c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <MX_GPIO_Init+0x4c>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_GPIO_Init+0x4c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	4a0f      	ldr	r2, [pc, #60]	@ (8000950 <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000918:	6453      	str	r3, [r2, #68]	@ 0x44
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	4a08      	ldr	r2, [pc, #32]	@ (8000950 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	@ 0x40
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	@ 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a19      	ldr	r2, [pc, #100]	@ (80009d8 <HAL_I2C_MspInit+0x84>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12b      	bne.n	80009ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <HAL_I2C_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a17      	ldr	r2, [pc, #92]	@ (80009dc <HAL_I2C_MspInit+0x88>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <HAL_I2C_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000992:	23c0      	movs	r3, #192	@ 0xc0
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a2:	2304      	movs	r3, #4
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <HAL_I2C_MspInit+0x8c>)
 80009ae:	f000 fc99 	bl	80012e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_I2C_MspInit+0x88>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_I2C_MspInit+0x88>)
 80009bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_I2C_MspInit+0x88>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	@ 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40005400 	.word	0x40005400
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400

080009e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <HAL_RTC_MspInit+0x4c>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d110      	bne.n	8000a26 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV20;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_RTC_MspInit+0x50>)
 8000a0a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 ff35 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8000a1c:	f7ff ff6c 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_RTC_MspInit+0x54>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40002800 	.word	0x40002800
 8000a34:	00140300 	.word	0x00140300
 8000a38:	42470e3c 	.word	0x42470e3c

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <NMI_Handler+0x4>

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <MemManage_Handler+0x4>

08000a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a92:	f000 fafd 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f002 faee 	bl	80030ac <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20020000 	.word	0x20020000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	20000114 	.word	0x20000114
 8000b04:	20000670 	.word	0x20000670

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b30:	f7ff ffea 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	@ (8000b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f002 faad 	bl	80030b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fd95 	bl	800068c <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b70:	080041ac 	.word	0x080041ac
  ldr r2, =_sbss
 8000b74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b78:	2000066c 	.word	0x2000066c

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>

08000b7e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af04      	add	r7, sp, #16
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	9302      	str	r3, [sp, #8]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2178      	movs	r1, #120	@ 0x78
 8000baa:	4803      	ldr	r0, [pc, #12]	@ (8000bb8 <ssd1306_WriteCommand+0x2c>)
 8000bac:	f000 fe7a 	bl	80018a4 <HAL_I2C_Mem_Write>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000078 	.word	0x20000078

08000bbc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af04      	add	r7, sp, #16
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	f04f 32ff 	mov.w	r2, #4294967295
 8000bce:	9202      	str	r2, [sp, #8]
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2240      	movs	r2, #64	@ 0x40
 8000bda:	2178      	movs	r1, #120	@ 0x78
 8000bdc:	4803      	ldr	r0, [pc, #12]	@ (8000bec <ssd1306_WriteData+0x30>)
 8000bde:	f000 fe61 	bl	80018a4 <HAL_I2C_Mem_Write>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000078 	.word	0x20000078

08000bf0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000bf4:	f7ff ffc3 	bl	8000b7e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000bf8:	2064      	movs	r0, #100	@ 0x64
 8000bfa:	f000 fa69 	bl	80010d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f9d6 	bl	8000fb0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c04:	2020      	movs	r0, #32
 8000c06:	f7ff ffc1 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff ffbe 	bl	8000b8c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c10:	20b0      	movs	r0, #176	@ 0xb0
 8000c12:	f7ff ffbb 	bl	8000b8c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c16:	20c8      	movs	r0, #200	@ 0xc8
 8000c18:	f7ff ffb8 	bl	8000b8c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff ffb5 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000c22:	2010      	movs	r0, #16
 8000c24:	f7ff ffb2 	bl	8000b8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000c28:	2040      	movs	r0, #64	@ 0x40
 8000c2a:	f7ff ffaf 	bl	8000b8c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000c2e:	20ff      	movs	r0, #255	@ 0xff
 8000c30:	f000 f9aa 	bl	8000f88 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000c34:	20a1      	movs	r0, #161	@ 0xa1
 8000c36:	f7ff ffa9 	bl	8000b8c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000c3a:	20a6      	movs	r0, #166	@ 0xa6
 8000c3c:	f7ff ffa6 	bl	8000b8c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c40:	20a8      	movs	r0, #168	@ 0xa8
 8000c42:	f7ff ffa3 	bl	8000b8c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000c46:	203f      	movs	r0, #63	@ 0x3f
 8000c48:	f7ff ffa0 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c4c:	20a4      	movs	r0, #164	@ 0xa4
 8000c4e:	f7ff ff9d 	bl	8000b8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c52:	20d3      	movs	r0, #211	@ 0xd3
 8000c54:	f7ff ff9a 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff ff97 	bl	8000b8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c5e:	20d5      	movs	r0, #213	@ 0xd5
 8000c60:	f7ff ff94 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c64:	20f0      	movs	r0, #240	@ 0xf0
 8000c66:	f7ff ff91 	bl	8000b8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c6a:	20d9      	movs	r0, #217	@ 0xd9
 8000c6c:	f7ff ff8e 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c70:	2022      	movs	r0, #34	@ 0x22
 8000c72:	f7ff ff8b 	bl	8000b8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c76:	20da      	movs	r0, #218	@ 0xda
 8000c78:	f7ff ff88 	bl	8000b8c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c7c:	2012      	movs	r0, #18
 8000c7e:	f7ff ff85 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c82:	20db      	movs	r0, #219	@ 0xdb
 8000c84:	f7ff ff82 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c88:	2020      	movs	r0, #32
 8000c8a:	f7ff ff7f 	bl	8000b8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c8e:	208d      	movs	r0, #141	@ 0x8d
 8000c90:	f7ff ff7c 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c94:	2014      	movs	r0, #20
 8000c96:	f7ff ff79 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 f988 	bl	8000fb0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f80f 	bl	8000cc4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000ca6:	f000 f825 	bl	8000cf4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <ssd1306_Init+0xd0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <ssd1306_Init+0xd0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000cb6:	4b02      	ldr	r3, [pc, #8]	@ (8000cc0 <ssd1306_Init+0xd0>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	711a      	strb	r2, [r3, #4]
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000518 	.word	0x20000518

08000cc4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <ssd1306_Fill+0x14>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e000      	b.n	8000cda <ssd1306_Fill+0x16>
 8000cd8:	23ff      	movs	r3, #255	@ 0xff
 8000cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <ssd1306_Fill+0x2c>)
 8000ce2:	f002 f9db 	bl	800309c <memset>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000118 	.word	0x20000118

08000cf4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e016      	b.n	8000d2e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	3b50      	subs	r3, #80	@ 0x50
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff40 	bl	8000b8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff ff3d 	bl	8000b8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000d12:	2010      	movs	r0, #16
 8000d14:	f7ff ff3a 	bl	8000b8c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <ssd1306_UpdateScreen+0x4c>)
 8000d1e:	4413      	add	r3, r2
 8000d20:	2180      	movs	r1, #128	@ 0x80
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff4a 	bl	8000bbc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	d9e5      	bls.n	8000d00 <ssd1306_UpdateScreen+0xc>
    }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000118 	.word	0x20000118

08000d44 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	71bb      	strb	r3, [r7, #6]
 8000d52:	4613      	mov	r3, r2
 8000d54:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db3d      	blt.n	8000dda <ssd1306_DrawPixel+0x96>
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d62:	d83a      	bhi.n	8000dda <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d11a      	bne.n	8000da0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	4603      	mov	r3, r0
 8000d74:	01db      	lsls	r3, r3, #7
 8000d76:	4413      	add	r3, r2
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <ssd1306_DrawPixel+0xa4>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	b25a      	sxtb	r2, r3
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	2101      	movs	r1, #1
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b259      	sxtb	r1, r3
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	4603      	mov	r3, r0
 8000d94:	01db      	lsls	r3, r3, #7
 8000d96:	4413      	add	r3, r2
 8000d98:	b2c9      	uxtb	r1, r1
 8000d9a:	4a13      	ldr	r2, [pc, #76]	@ (8000de8 <ssd1306_DrawPixel+0xa4>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
 8000d9e:	e01d      	b.n	8000ddc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b2d8      	uxtb	r0, r3
 8000da8:	4603      	mov	r3, r0
 8000daa:	01db      	lsls	r3, r3, #7
 8000dac:	4413      	add	r3, r2
 8000dae:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <ssd1306_DrawPixel+0xa4>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	b259      	sxtb	r1, r3
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	01db      	lsls	r3, r3, #7
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b2c9      	uxtb	r1, r1
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <ssd1306_DrawPixel+0xa4>)
 8000dd6:	54d1      	strb	r1, [r2, r3]
 8000dd8:	e000      	b.n	8000ddc <ssd1306_DrawPixel+0x98>
        return;
 8000dda:	bf00      	nop
    }
}
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000118 	.word	0x20000118

08000dec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4604      	mov	r4, r0
 8000df4:	4638      	mov	r0, r7
 8000df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	2b1f      	cmp	r3, #31
 8000e02:	d902      	bls.n	8000e0a <ssd1306_WriteChar+0x1e>
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e08:	d901      	bls.n	8000e0e <ssd1306_WriteChar+0x22>
        return 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e077      	b.n	8000efe <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f08 <ssd1306_WriteChar+0x11c>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	783b      	ldrb	r3, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	2b80      	cmp	r3, #128	@ 0x80
 8000e1a:	dc06      	bgt.n	8000e2a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f08 <ssd1306_WriteChar+0x11c>)
 8000e1e:	885b      	ldrh	r3, [r3, #2]
 8000e20:	461a      	mov	r2, r3
 8000e22:	787b      	ldrb	r3, [r7, #1]
 8000e24:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000e26:	2b40      	cmp	r3, #64	@ 0x40
 8000e28:	dd01      	ble.n	8000e2e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e067      	b.n	8000efe <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e04e      	b.n	8000ed2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	3b20      	subs	r3, #32
 8000e3a:	7879      	ldrb	r1, [r7, #1]
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	4619      	mov	r1, r3
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	440b      	add	r3, r1
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	e036      	b.n	8000ec2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d013      	beq.n	8000e8c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e64:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <ssd1306_WriteChar+0x11c>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4413      	add	r3, r2
 8000e70:	b2d8      	uxtb	r0, r3
 8000e72:	4b25      	ldr	r3, [pc, #148]	@ (8000f08 <ssd1306_WriteChar+0x11c>)
 8000e74:	885b      	ldrh	r3, [r3, #2]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000e84:	4619      	mov	r1, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <ssd1306_DrawPixel>
 8000e8a:	e017      	b.n	8000ebc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <ssd1306_WriteChar+0x11c>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	b2d8      	uxtb	r0, r3
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <ssd1306_WriteChar+0x11c>)
 8000e9c:	885b      	ldrh	r3, [r3, #2]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b2d9      	uxtb	r1, r3
 8000ea8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f7ff ff44 	bl	8000d44 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	783b      	ldrb	r3, [r7, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d3c3      	bcc.n	8000e54 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	787b      	ldrb	r3, [r7, #1]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d3ab      	bcc.n	8000e34 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <ssd1306_WriteChar+0x11c>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d005      	beq.n	8000ef2 <ssd1306_WriteChar+0x106>
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	3a20      	subs	r2, #32
 8000eec:	440a      	add	r2, r1
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	e000      	b.n	8000ef4 <ssd1306_WriteChar+0x108>
 8000ef2:	783a      	ldrb	r2, [r7, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <ssd1306_WriteChar+0x11c>)
 8000efa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000518 	.word	0x20000518

08000f0c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	4638      	mov	r0, r7
 8000f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000f1a:	e013      	b.n	8000f44 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	7818      	ldrb	r0, [r3, #0]
 8000f20:	7e3b      	ldrb	r3, [r7, #24]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	463b      	mov	r3, r7
 8000f26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f28:	f7ff ff60 	bl	8000dec <ssd1306_WriteChar>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d002      	beq.n	8000f3e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	e008      	b.n	8000f50 <ssd1306_WriteString+0x44>
        }
        str++;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3301      	adds	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1e7      	bne.n	8000f1c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <ssd1306_SetCursor+0x2c>)
 8000f6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <ssd1306_SetCursor+0x2c>)
 8000f76:	805a      	strh	r2, [r3, #2]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	20000518 	.word	0x20000518

08000f88 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f92:	2381      	movs	r3, #129	@ 0x81
 8000f94:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fdf7 	bl	8000b8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fdf3 	bl	8000b8c <ssd1306_WriteCommand>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000fc0:	23af      	movs	r3, #175	@ 0xaf
 8000fc2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <ssd1306_SetDisplayOn+0x38>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	715a      	strb	r2, [r3, #5]
 8000fca:	e004      	b.n	8000fd6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000fcc:	23ae      	movs	r3, #174	@ 0xae
 8000fce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <ssd1306_SetDisplayOn+0x38>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fdd7 	bl	8000b8c <ssd1306_WriteCommand>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000518 	.word	0x20000518

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <HAL_Init+0x40>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_Init+0x40>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	@ (800102c <HAL_Init+0x40>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f931 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fc70 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f93b 	bl	80012ca <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f911 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	20000008 	.word	0x20000008
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000520 	.word	0x20000520

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000520 	.word	0x20000520

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff47 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff5c 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffb0 	bl	8001238 <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e16b      	b.n	80015d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 815a 	bne.w	80015d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d005      	beq.n	8001336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	2b02      	cmp	r3, #2
 8001334:	d130      	bne.n	8001398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 0201 	and.w	r2, r3, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d017      	beq.n	80013d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80b4 	beq.w	80015d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b60      	ldr	r3, [pc, #384]	@ (80015f0 <HAL_GPIO_Init+0x30c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	4a5f      	ldr	r2, [pc, #380]	@ (80015f0 <HAL_GPIO_Init+0x30c>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001478:	6453      	str	r3, [r2, #68]	@ 0x44
 800147a:	4b5d      	ldr	r3, [pc, #372]	@ (80015f0 <HAL_GPIO_Init+0x30c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001486:	4a5b      	ldr	r2, [pc, #364]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a52      	ldr	r2, [pc, #328]	@ (80015f8 <HAL_GPIO_Init+0x314>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d02b      	beq.n	800150a <HAL_GPIO_Init+0x226>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a51      	ldr	r2, [pc, #324]	@ (80015fc <HAL_GPIO_Init+0x318>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d025      	beq.n	8001506 <HAL_GPIO_Init+0x222>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a50      	ldr	r2, [pc, #320]	@ (8001600 <HAL_GPIO_Init+0x31c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01f      	beq.n	8001502 <HAL_GPIO_Init+0x21e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001604 <HAL_GPIO_Init+0x320>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d019      	beq.n	80014fe <HAL_GPIO_Init+0x21a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001608 <HAL_GPIO_Init+0x324>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0x216>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4d      	ldr	r2, [pc, #308]	@ (800160c <HAL_GPIO_Init+0x328>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00d      	beq.n	80014f6 <HAL_GPIO_Init+0x212>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001610 <HAL_GPIO_Init+0x32c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x20e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001614 <HAL_GPIO_Init+0x330>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_GPIO_Init+0x20a>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e00e      	b.n	800150c <HAL_GPIO_Init+0x228>
 80014ee:	2308      	movs	r3, #8
 80014f0:	e00c      	b.n	800150c <HAL_GPIO_Init+0x228>
 80014f2:	2306      	movs	r3, #6
 80014f4:	e00a      	b.n	800150c <HAL_GPIO_Init+0x228>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x228>
 80014fa:	2304      	movs	r3, #4
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x228>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x228>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x228>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x228>
 800150a:	2300      	movs	r3, #0
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152a:	4b3b      	ldr	r3, [pc, #236]	@ (8001618 <HAL_GPIO_Init+0x334>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154e:	4a32      	ldr	r2, [pc, #200]	@ (8001618 <HAL_GPIO_Init+0x334>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001554:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <HAL_GPIO_Init+0x334>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001578:	4a27      	ldr	r2, [pc, #156]	@ (8001618 <HAL_GPIO_Init+0x334>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800157e:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <HAL_GPIO_Init+0x334>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001618 <HAL_GPIO_Init+0x334>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_GPIO_Init+0x334>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015cc:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <HAL_GPIO_Init+0x334>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f ae90 	bls.w	8001300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	@ 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40021400 	.word	0x40021400
 8001610:	40021800 	.word	0x40021800
 8001614:	40021c00 	.word	0x40021c00
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e12b      	b.n	8001886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff f986 	bl	8000954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2224      	movs	r2, #36	@ 0x24
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800166e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800167e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001680:	f001 f8ea 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a81      	ldr	r2, [pc, #516]	@ (8001890 <HAL_I2C_Init+0x274>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d807      	bhi.n	80016a0 <HAL_I2C_Init+0x84>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4a80      	ldr	r2, [pc, #512]	@ (8001894 <HAL_I2C_Init+0x278>)
 8001694:	4293      	cmp	r3, r2
 8001696:	bf94      	ite	ls
 8001698:	2301      	movls	r3, #1
 800169a:	2300      	movhi	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	e006      	b.n	80016ae <HAL_I2C_Init+0x92>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001898 <HAL_I2C_Init+0x27c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	bf94      	ite	ls
 80016a8:	2301      	movls	r3, #1
 80016aa:	2300      	movhi	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0e7      	b.n	8001886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4a78      	ldr	r2, [pc, #480]	@ (800189c <HAL_I2C_Init+0x280>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001890 <HAL_I2C_Init+0x274>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d802      	bhi.n	80016f0 <HAL_I2C_Init+0xd4>
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3301      	adds	r3, #1
 80016ee:	e009      	b.n	8001704 <HAL_I2C_Init+0xe8>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	4a69      	ldr	r2, [pc, #420]	@ (80018a0 <HAL_I2C_Init+0x284>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	099b      	lsrs	r3, r3, #6
 8001702:	3301      	adds	r3, #1
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	430b      	orrs	r3, r1
 800170a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001716:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	495c      	ldr	r1, [pc, #368]	@ (8001890 <HAL_I2C_Init+0x274>)
 8001720:	428b      	cmp	r3, r1
 8001722:	d819      	bhi.n	8001758 <HAL_I2C_Init+0x13c>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1e59      	subs	r1, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001732:	1c59      	adds	r1, r3, #1
 8001734:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001738:	400b      	ands	r3, r1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00a      	beq.n	8001754 <HAL_I2C_Init+0x138>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1e59      	subs	r1, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fbb1 f3f3 	udiv	r3, r1, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001752:	e051      	b.n	80017f8 <HAL_I2C_Init+0x1dc>
 8001754:	2304      	movs	r3, #4
 8001756:	e04f      	b.n	80017f8 <HAL_I2C_Init+0x1dc>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d111      	bne.n	8001784 <HAL_I2C_Init+0x168>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1e58      	subs	r0, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	440b      	add	r3, r1
 800176e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001772:	3301      	adds	r3, #1
 8001774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	e012      	b.n	80017aa <HAL_I2C_Init+0x18e>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1e58      	subs	r0, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	0099      	lsls	r1, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	fbb0 f3f3 	udiv	r3, r0, r3
 800179a:	3301      	adds	r3, #1
 800179c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_Init+0x196>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e022      	b.n	80017f8 <HAL_I2C_Init+0x1dc>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10e      	bne.n	80017d8 <HAL_I2C_Init+0x1bc>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1e58      	subs	r0, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	440b      	add	r3, r1
 80017c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017d6:	e00f      	b.n	80017f8 <HAL_I2C_Init+0x1dc>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e58      	subs	r0, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	0099      	lsls	r1, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	6809      	ldr	r1, [r1, #0]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001826:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6911      	ldr	r1, [r2, #16]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68d2      	ldr	r2, [r2, #12]
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	430b      	orrs	r3, r1
 800183a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2220      	movs	r2, #32
 8001872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	000186a0 	.word	0x000186a0
 8001894:	001e847f 	.word	0x001e847f
 8001898:	003d08ff 	.word	0x003d08ff
 800189c:	431bde83 	.word	0x431bde83
 80018a0:	10624dd3 	.word	0x10624dd3

080018a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	817b      	strh	r3, [r7, #10]
 80018b6:	460b      	mov	r3, r1
 80018b8:	813b      	strh	r3, [r7, #8]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018be:	f7ff fbfb 	bl	80010b8 <HAL_GetTick>
 80018c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	f040 80d9 	bne.w	8001a84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2319      	movs	r3, #25
 80018d8:	2201      	movs	r2, #1
 80018da:	496d      	ldr	r1, [pc, #436]	@ (8001a90 <HAL_I2C_Mem_Write+0x1ec>)
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f971 	bl	8001bc4 <I2C_WaitOnFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018e8:	2302      	movs	r3, #2
 80018ea:	e0cc      	b.n	8001a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_I2C_Mem_Write+0x56>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e0c5      	b.n	8001a86 <HAL_I2C_Mem_Write+0x1e2>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d007      	beq.n	8001920 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800192e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2221      	movs	r2, #33	@ 0x21
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2240      	movs	r2, #64	@ 0x40
 800193c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a3a      	ldr	r2, [r7, #32]
 800194a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a94 <HAL_I2C_Mem_Write+0x1f0>)
 8001960:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001962:	88f8      	ldrh	r0, [r7, #6]
 8001964:	893a      	ldrh	r2, [r7, #8]
 8001966:	8979      	ldrh	r1, [r7, #10]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	4603      	mov	r3, r0
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f890 	bl	8001a98 <I2C_RequestMemoryWrite>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d052      	beq.n	8001a24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e081      	b.n	8001a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 fa36 	bl	8001df8 <I2C_WaitOnTXEFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00d      	beq.n	80019ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	2b04      	cmp	r3, #4
 8001998:	d107      	bne.n	80019aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06b      	b.n	8001a86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d11b      	bne.n	8001a24 <HAL_I2C_Mem_Write+0x180>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d017      	beq.n	8001a24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1aa      	bne.n	8001982 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 fa29 	bl	8001e88 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00d      	beq.n	8001a58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d107      	bne.n	8001a54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e016      	b.n	8001a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
  }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	00100002 	.word	0x00100002
 8001a94:	ffff0000 	.word	0xffff0000

08001a98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	817b      	strh	r3, [r7, #10]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	813b      	strh	r3, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f878 	bl	8001bc4 <I2C_WaitOnFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ae8:	d103      	bne.n	8001af2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001af0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e05f      	b.n	8001bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001af6:	897b      	ldrh	r3, [r7, #10]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	6a3a      	ldr	r2, [r7, #32]
 8001b0a:	492d      	ldr	r1, [pc, #180]	@ (8001bc0 <I2C_RequestMemoryWrite+0x128>)
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f8d3 	bl	8001cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e04c      	b.n	8001bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b34:	6a39      	ldr	r1, [r7, #32]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f95e 	bl	8001df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00d      	beq.n	8001b5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d107      	bne.n	8001b5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e02b      	b.n	8001bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b64:	893b      	ldrh	r3, [r7, #8]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	e021      	b.n	8001bb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b70:	893b      	ldrh	r3, [r7, #8]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	6a39      	ldr	r1, [r7, #32]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f938 	bl	8001df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d107      	bne.n	8001ba6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e005      	b.n	8001bb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001baa:	893b      	ldrh	r3, [r7, #8]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	00010002 	.word	0x00010002

08001bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd4:	e048      	b.n	8001c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d044      	beq.n	8001c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bde:	f7ff fa6b 	bl	80010b8 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d302      	bcc.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d139      	bne.n	8001c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10d      	bne.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	43da      	mvns	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	e00c      	b.n	8001c34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	43da      	mvns	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	4013      	ands	r3, r2
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2301      	moveq	r3, #1
 8001c2e:	2300      	movne	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d116      	bne.n	8001c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e023      	b.n	8001cb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	0c1b      	lsrs	r3, r3, #16
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d10d      	bne.n	8001c8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf0c      	ite	eq
 8001c84:	2301      	moveq	r3, #1
 8001c86:	2300      	movne	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	e00c      	b.n	8001ca8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	43da      	mvns	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d093      	beq.n	8001bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cc6:	e071      	b.n	8001dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd6:	d123      	bne.n	8001d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e067      	b.n	8001df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d26:	d041      	beq.n	8001dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d28:	f7ff f9c6 	bl	80010b8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d302      	bcc.n	8001d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d136      	bne.n	8001dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d10c      	bne.n	8001d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4013      	ands	r3, r2
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e00b      	b.n	8001d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d016      	beq.n	8001dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e021      	b.n	8001df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0c1b      	lsrs	r3, r3, #16
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d10c      	bne.n	8001dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e00b      	b.n	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f af6d 	bne.w	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e04:	e034      	b.n	8001e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f886 	bl	8001f18 <I2C_IsAcknowledgeFailed>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e034      	b.n	8001e80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d028      	beq.n	8001e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1e:	f7ff f94b 	bl	80010b8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d302      	bcc.n	8001e34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d11d      	bne.n	8001e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3e:	2b80      	cmp	r3, #128	@ 0x80
 8001e40:	d016      	beq.n	8001e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e007      	b.n	8001e80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7a:	2b80      	cmp	r3, #128	@ 0x80
 8001e7c:	d1c3      	bne.n	8001e06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e94:	e034      	b.n	8001f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f83e 	bl	8001f18 <I2C_IsAcknowledgeFailed>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e034      	b.n	8001f10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d028      	beq.n	8001f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eae:	f7ff f903 	bl	80010b8 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d302      	bcc.n	8001ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d11d      	bne.n	8001f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d016      	beq.n	8001f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	f043 0220 	orr.w	r2, r3, #32
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e007      	b.n	8001f10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d1c3      	bne.n	8001e96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2e:	d11b      	bne.n	8001f68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f043 0204 	orr.w	r2, r3, #4
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e267      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d075      	beq.n	8002082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f96:	4b88      	ldr	r3, [pc, #544]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d00c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa2:	4b85      	ldr	r3, [pc, #532]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d112      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4b82      	ldr	r3, [pc, #520]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05b      	beq.n	8002080 <HAL_RCC_OscConfig+0x108>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d157      	bne.n	8002080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e242      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_OscConfig+0x74>
 8001fde:	4b76      	ldr	r3, [pc, #472]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0xb0>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x98>
 8001ff6:	4b70      	ldr	r3, [pc, #448]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b6d      	ldr	r3, [pc, #436]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6c      	ldr	r2, [pc, #432]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0xb0>
 8002010:	4b69      	ldr	r3, [pc, #420]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a68      	ldr	r2, [pc, #416]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b66      	ldr	r3, [pc, #408]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a65      	ldr	r2, [pc, #404]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff f842 	bl	80010b8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff f83e 	bl	80010b8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	@ 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e207      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b5b      	ldr	r3, [pc, #364]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0xc0>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff f82e 	bl	80010b8 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff f82a 	bl	80010b8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	@ 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1f3      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	4b51      	ldr	r3, [pc, #324]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0xe8>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d063      	beq.n	8002156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208e:	4b4a      	ldr	r3, [pc, #296]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209a:	4b47      	ldr	r3, [pc, #284]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d11c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a6:	4b44      	ldr	r3, [pc, #272]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	4b41      	ldr	r3, [pc, #260]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x152>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1c7      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b3b      	ldr	r3, [pc, #236]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4937      	ldr	r1, [pc, #220]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	e03a      	b.n	8002156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <HAL_RCC_OscConfig+0x244>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe ffe3 	bl	80010b8 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f6:	f7fe ffdf 	bl	80010b8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e1a8      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	4b2b      	ldr	r3, [pc, #172]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4925      	ldr	r1, [pc, #148]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212a:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <HAL_RCC_OscConfig+0x244>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe ffc2 	bl	80010b8 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe ffbe 	bl	80010b8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e187      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d036      	beq.n	80021d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <HAL_RCC_OscConfig+0x248>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7fe ffa2 	bl	80010b8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe ff9e 	bl	80010b8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e167      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_RCC_OscConfig+0x240>)
 800218c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x200>
 8002196:	e01b      	b.n	80021d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002198:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_RCC_OscConfig+0x248>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7fe ff8b 	bl	80010b8 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	e00e      	b.n	80021c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe ff87 	bl	80010b8 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d907      	bls.n	80021c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e150      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
 80021b8:	40023800 	.word	0x40023800
 80021bc:	42470000 	.word	0x42470000
 80021c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	4b88      	ldr	r3, [pc, #544]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 80021c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ea      	bne.n	80021a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8097 	beq.w	800230c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b81      	ldr	r3, [pc, #516]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b7d      	ldr	r3, [pc, #500]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	4a7c      	ldr	r2, [pc, #496]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fe:	4b7a      	ldr	r3, [pc, #488]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b77      	ldr	r3, [pc, #476]	@ (80023ec <HAL_RCC_OscConfig+0x474>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b74      	ldr	r3, [pc, #464]	@ (80023ec <HAL_RCC_OscConfig+0x474>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a73      	ldr	r2, [pc, #460]	@ (80023ec <HAL_RCC_OscConfig+0x474>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe ff47 	bl	80010b8 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe ff43 	bl	80010b8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e10c      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <HAL_RCC_OscConfig+0x474>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x2ea>
 8002254:	4b64      	ldr	r3, [pc, #400]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002258:	4a63      	ldr	r2, [pc, #396]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002260:	e01c      	b.n	800229c <HAL_RCC_OscConfig+0x324>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x30c>
 800226a:	4b5f      	ldr	r3, [pc, #380]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226e:	4a5e      	ldr	r2, [pc, #376]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	@ 0x70
 8002276:	4b5c      	ldr	r3, [pc, #368]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227a:	4a5b      	ldr	r2, [pc, #364]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	@ 0x70
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0x324>
 8002284:	4b58      	ldr	r3, [pc, #352]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002288:	4a57      	ldr	r2, [pc, #348]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002290:	4b55      	ldr	r3, [pc, #340]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002294:	4a54      	ldr	r2, [pc, #336]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe ff08 	bl	80010b8 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7fe ff04 	bl	80010b8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0cb      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	4b49      	ldr	r3, [pc, #292]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ee      	beq.n	80022ac <HAL_RCC_OscConfig+0x334>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fef2 	bl	80010b8 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe feee 	bl	80010b8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0b5      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ee:	4b3e      	ldr	r3, [pc, #248]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ee      	bne.n	80022d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002300:	4b39      	ldr	r3, [pc, #228]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	4a38      	ldr	r2, [pc, #224]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800230a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a1 	beq.w	8002458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002316:	4b34      	ldr	r3, [pc, #208]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b08      	cmp	r3, #8
 8002320:	d05c      	beq.n	80023dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d141      	bne.n	80023ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <HAL_RCC_OscConfig+0x478>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fec2 	bl	80010b8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe febe 	bl	80010b8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e087      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	491b      	ldr	r1, [pc, #108]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <HAL_RCC_OscConfig+0x478>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fe97 	bl	80010b8 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238e:	f7fe fe93 	bl	80010b8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e05c      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x416>
 80023ac:	e054      	b.n	8002458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <HAL_RCC_OscConfig+0x478>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe80 	bl	80010b8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe fe7c 	bl	80010b8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e045      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_RCC_OscConfig+0x470>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x444>
 80023da:	e03d      	b.n	8002458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e038      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <HAL_RCC_OscConfig+0x4ec>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d028      	beq.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d121      	bne.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11a      	bne.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800242a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800242c:	4293      	cmp	r3, r2
 800242e:	d111      	bne.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	3b01      	subs	r3, #1
 800243e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d107      	bne.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800

08002468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0cc      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b68      	ldr	r3, [pc, #416]	@ (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d90c      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b65      	ldr	r3, [pc, #404]	@ (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b63      	ldr	r3, [pc, #396]	@ (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0b8      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024bc:	4b59      	ldr	r3, [pc, #356]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a58      	ldr	r2, [pc, #352]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d4:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a52      	ldr	r2, [pc, #328]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e0:	4b50      	ldr	r3, [pc, #320]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	494d      	ldr	r1, [pc, #308]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d044      	beq.n	8002588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d119      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e07f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d003      	beq.n	8002526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	2b03      	cmp	r3, #3
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b3f      	ldr	r3, [pc, #252]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e067      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4934      	ldr	r1, [pc, #208]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002558:	f7fe fdae 	bl	80010b8 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7fe fdaa 	bl	80010b8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e04f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b25      	ldr	r3, [pc, #148]	@ (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d20c      	bcs.n	80025b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b22      	ldr	r3, [pc, #136]	@ (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e032      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025bc:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4916      	ldr	r1, [pc, #88]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	490e      	ldr	r1, [pc, #56]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ee:	f000 f821 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	490a      	ldr	r1, [pc, #40]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	4a09      	ldr	r2, [pc, #36]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800260a:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fd0e 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00
 8002624:	40023800 	.word	0x40023800
 8002628:	080039d8 	.word	0x080039d8
 800262c:	20000000 	.word	0x20000000
 8002630:	20000004 	.word	0x20000004

08002634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002638:	b094      	sub	sp, #80	@ 0x50
 800263a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002640:	2300      	movs	r3, #0
 8002642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002644:	2300      	movs	r3, #0
 8002646:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800264c:	4b79      	ldr	r3, [pc, #484]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d00d      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x40>
 8002658:	2b08      	cmp	r3, #8
 800265a:	f200 80e1 	bhi.w	8002820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x34>
 8002662:	2b04      	cmp	r3, #4
 8002664:	d003      	beq.n	800266e <HAL_RCC_GetSysClockFreq+0x3a>
 8002666:	e0db      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b73      	ldr	r3, [pc, #460]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x204>)
 800266a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800266c:	e0db      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800266e:	4b73      	ldr	r3, [pc, #460]	@ (800283c <HAL_RCC_GetSysClockFreq+0x208>)
 8002670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002672:	e0d8      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002674:	4b6f      	ldr	r3, [pc, #444]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800267c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800267e:	4b6d      	ldr	r3, [pc, #436]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d063      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268a:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	099b      	lsrs	r3, r3, #6
 8002690:	2200      	movs	r2, #0
 8002692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002694:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269c:	633b      	str	r3, [r7, #48]	@ 0x30
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80026a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026a6:	4622      	mov	r2, r4
 80026a8:	462b      	mov	r3, r5
 80026aa:	f04f 0000 	mov.w	r0, #0
 80026ae:	f04f 0100 	mov.w	r1, #0
 80026b2:	0159      	lsls	r1, r3, #5
 80026b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b8:	0150      	lsls	r0, r2, #5
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4621      	mov	r1, r4
 80026c0:	1a51      	subs	r1, r2, r1
 80026c2:	6139      	str	r1, [r7, #16]
 80026c4:	4629      	mov	r1, r5
 80026c6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d8:	4659      	mov	r1, fp
 80026da:	018b      	lsls	r3, r1, #6
 80026dc:	4651      	mov	r1, sl
 80026de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e2:	4651      	mov	r1, sl
 80026e4:	018a      	lsls	r2, r1, #6
 80026e6:	4651      	mov	r1, sl
 80026e8:	ebb2 0801 	subs.w	r8, r2, r1
 80026ec:	4659      	mov	r1, fp
 80026ee:	eb63 0901 	sbc.w	r9, r3, r1
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002706:	4690      	mov	r8, r2
 8002708:	4699      	mov	r9, r3
 800270a:	4623      	mov	r3, r4
 800270c:	eb18 0303 	adds.w	r3, r8, r3
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	462b      	mov	r3, r5
 8002714:	eb49 0303 	adc.w	r3, r9, r3
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002726:	4629      	mov	r1, r5
 8002728:	024b      	lsls	r3, r1, #9
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002730:	4621      	mov	r1, r4
 8002732:	024a      	lsls	r2, r1, #9
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800273a:	2200      	movs	r2, #0
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800273e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002744:	f7fd fd94 	bl	8000270 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002750:	e058      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b38      	ldr	r3, [pc, #224]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	2200      	movs	r2, #0
 800275a:	4618      	mov	r0, r3
 800275c:	4611      	mov	r1, r2
 800275e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
 8002768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	f04f 0000 	mov.w	r0, #0
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	0159      	lsls	r1, r3, #5
 800277a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277e:	0150      	lsls	r0, r2, #5
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4641      	mov	r1, r8
 8002786:	ebb2 0a01 	subs.w	sl, r2, r1
 800278a:	4649      	mov	r1, r9
 800278c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800279c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a4:	ebb2 040a 	subs.w	r4, r2, sl
 80027a8:	eb63 050b 	sbc.w	r5, r3, fp
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	00eb      	lsls	r3, r5, #3
 80027b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ba:	00e2      	lsls	r2, r4, #3
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	4643      	mov	r3, r8
 80027c2:	18e3      	adds	r3, r4, r3
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	464b      	mov	r3, r9
 80027c8:	eb45 0303 	adc.w	r3, r5, r3
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027da:	4629      	mov	r1, r5
 80027dc:	028b      	lsls	r3, r1, #10
 80027de:	4621      	mov	r1, r4
 80027e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e4:	4621      	mov	r1, r4
 80027e6:	028a      	lsls	r2, r1, #10
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ee:	2200      	movs	r2, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	61fa      	str	r2, [r7, #28]
 80027f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f8:	f7fd fd3a 	bl	8000270 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4613      	mov	r3, r2
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	3301      	adds	r3, #1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x204>)
 8002822:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002828:	4618      	mov	r0, r3
 800282a:	3750      	adds	r7, #80	@ 0x50
 800282c:	46bd      	mov	sp, r7
 800282e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800
 8002838:	00f42400 	.word	0x00f42400
 800283c:	007a1200 	.word	0x007a1200

08002840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b03      	ldr	r3, [pc, #12]	@ (8002854 <HAL_RCC_GetHCLKFreq+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000

08002858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800285c:	f7ff fff0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0a9b      	lsrs	r3, r3, #10
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	@ (800287c <HAL_RCC_GetPCLK1Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	080039e8 	.word	0x080039e8

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d035      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028a8:	4b62      	ldr	r3, [pc, #392]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028ae:	f7fe fc03 	bl	80010b8 <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028b6:	f7fe fbff 	bl	80010b8 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0b0      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	019a      	lsls	r2, r3, #6
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	071b      	lsls	r3, r3, #28
 80028e0:	4955      	ldr	r1, [pc, #340]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028e8:	4b52      	ldr	r3, [pc, #328]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028ee:	f7fe fbe3 	bl	80010b8 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028f6:	f7fe fbdf 	bl	80010b8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e090      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002908:	4b4b      	ldr	r3, [pc, #300]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8083 	beq.w	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	4a43      	ldr	r2, [pc, #268]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	4b41      	ldr	r3, [pc, #260]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800293e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a3e      	ldr	r2, [pc, #248]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002948:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800294a:	f7fe fbb5 	bl	80010b8 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe fbb1 	bl	80010b8 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e062      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002964:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002970:	4b31      	ldr	r3, [pc, #196]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002978:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	429a      	cmp	r2, r3
 800298c:	d028      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800298e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002996:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002998:	4b29      	ldr	r3, [pc, #164]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299e:	4b28      	ldr	r3, [pc, #160]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029a4:	4a24      	ldr	r2, [pc, #144]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029aa:	4b23      	ldr	r3, [pc, #140]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d114      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe fb7f 	bl	80010b8 <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fb7b 	bl	80010b8 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e02a      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b18      	ldr	r3, [pc, #96]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029ec:	d10d      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80029ee:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80029fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a02:	490d      	ldr	r1, [pc, #52]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]
 8002a08:	e005      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a10:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a14:	6093      	str	r3, [r2, #8]
 8002a16:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a22:	4905      	ldr	r1, [pc, #20]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	42470068 	.word	0x42470068
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	42470e40 	.word	0x42470e40

08002a44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e073      	b.n	8002b42 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7f5b      	ldrb	r3, [r3, #29]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd ffba 	bl	80009e4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d055      	beq.n	8002b30 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	22ca      	movs	r2, #202	@ 0xca
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2253      	movs	r2, #83	@ 0x53
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fa49 	bl	8002f2c <RTC_EnterInitMode>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d12c      	bne.n	8002afe <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ab6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6899      	ldr	r1, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68d2      	ldr	r2, [r2, #12]
 8002ade:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6919      	ldr	r1, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	041a      	lsls	r2, r3, #16
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fa50 	bl	8002f9a <RTC_ExitInitMode>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d110      	bne.n	8002b26 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	22ff      	movs	r2, #255	@ 0xff
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b2e:	e001      	b.n	8002b34 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b4a:	b590      	push	{r4, r7, lr}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	7f1b      	ldrb	r3, [r3, #28]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_RTC_SetTime+0x1c>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e087      	b.n	8002c76 <HAL_RTC_SetTime+0x12c>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d126      	bne.n	8002bc6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fa27 	bl	8002fe4 <RTC_ByteToBcd2>
 8002b96:	4603      	mov	r3, r0
 8002b98:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fa20 	bl	8002fe4 <RTC_ByteToBcd2>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002ba8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	789b      	ldrb	r3, [r3, #2]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fa18 	bl	8002fe4 <RTC_ByteToBcd2>
 8002bb4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bb6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	78db      	ldrb	r3, [r3, #3]
 8002bbe:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e018      	b.n	8002bf8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	785b      	ldrb	r3, [r3, #1]
 8002be4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002be6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002bec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	78db      	ldrb	r3, [r3, #3]
 8002bf2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	22ca      	movs	r2, #202	@ 0xca
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2253      	movs	r2, #83	@ 0x53
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f98f 	bl	8002f2c <RTC_EnterInitMode>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d120      	bne.n	8002c5a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002c22:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002c26:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6899      	ldr	r1, [r3, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f9a2 	bl	8002f9a <RTC_ExitInitMode>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	22ff      	movs	r2, #255	@ 0xff
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]

  return status;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}

08002c7e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002cb0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	0d9b      	lsrs	r3, r3, #22
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11a      	bne.n	8002d30 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f98e 	bl	8003020 <RTC_Bcd2ToByte>
 8002d04:	4603      	mov	r3, r0
 8002d06:	461a      	mov	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	785b      	ldrb	r3, [r3, #1]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f985 	bl	8003020 <RTC_Bcd2ToByte>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	789b      	ldrb	r3, [r3, #2]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f97c 	bl	8003020 <RTC_Bcd2ToByte>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d3a:	b590      	push	{r4, r7, lr}
 8002d3c:	b087      	sub	sp, #28
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	7f1b      	ldrb	r3, [r3, #28]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_RTC_SetDate+0x1c>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e071      	b.n	8002e3a <HAL_RTC_SetDate+0x100>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10e      	bne.n	8002d86 <HAL_RTC_SetDate+0x4c>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	785b      	ldrb	r3, [r3, #1]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	f023 0310 	bic.w	r3, r3, #16
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	330a      	adds	r3, #10
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11c      	bne.n	8002dc6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	78db      	ldrb	r3, [r3, #3]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f927 	bl	8002fe4 <RTC_ByteToBcd2>
 8002d96:	4603      	mov	r3, r0
 8002d98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f920 	bl	8002fe4 <RTC_ByteToBcd2>
 8002da4:	4603      	mov	r3, r0
 8002da6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002da8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	789b      	ldrb	r3, [r3, #2]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f918 	bl	8002fe4 <RTC_ByteToBcd2>
 8002db4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002db6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e00e      	b.n	8002de4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	78db      	ldrb	r3, [r3, #3]
 8002dca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	785b      	ldrb	r3, [r3, #1]
 8002dd0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002dd2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002dd8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	22ca      	movs	r2, #202	@ 0xca
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2253      	movs	r2, #83	@ 0x53
 8002df2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f899 	bl	8002f2c <RTC_EnterInitMode>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10c      	bne.n	8002e1e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e12:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f8c0 	bl	8002f9a <RTC_ExitInitMode>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	22ff      	movs	r2, #255	@ 0xff
 8002e30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]

  return status;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}

08002e42 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e60:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	0b5b      	lsrs	r3, r3, #13
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11a      	bne.n	8002ed6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	78db      	ldrb	r3, [r3, #3]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f8bb 	bl	8003020 <RTC_Bcd2ToByte>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	785b      	ldrb	r3, [r3, #1]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f8b2 	bl	8003020 <RTC_Bcd2ToByte>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	789b      	ldrb	r3, [r3, #2]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f8a9 	bl	8003020 <RTC_Bcd2ToByte>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f28 <HAL_RTC_WaitForSynchro+0x48>)
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef4:	f7fe f8e0 	bl	80010b8 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002efa:	e009      	b.n	8002f10 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002efc:	f7fe f8dc 	bl	80010b8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f0a:	d901      	bls.n	8002f10 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e007      	b.n	8002f20 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	00017f5f 	.word	0x00017f5f

08002f2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d122      	bne.n	8002f90 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f5a:	f7fe f8ad 	bl	80010b8 <HAL_GetTick>
 8002f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f60:	e00c      	b.n	8002f7c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f62:	f7fe f8a9 	bl	80010b8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f70:	d904      	bls.n	8002f7c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2204      	movs	r2, #4
 8002f76:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <RTC_EnterInitMode+0x64>
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d1e8      	bne.n	8002f62 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fb4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff8b 	bl	8002ee0 <HAL_RTC_WaitForSynchro>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002ff2:	e005      	b.n	8003000 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	3b0a      	subs	r3, #10
 8002ffe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	2b09      	cmp	r3, #9
 8003004:	d8f6      	bhi.n	8002ff4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	b2da      	uxtb	r2, r3
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	4313      	orrs	r3, r2
 8003012:	b2db      	uxtb	r3, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4413      	add	r3, r2
 800304e:	b2db      	uxtb	r3, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <siprintf>:
 800305c:	b40e      	push	{r1, r2, r3}
 800305e:	b500      	push	{lr}
 8003060:	b09c      	sub	sp, #112	@ 0x70
 8003062:	ab1d      	add	r3, sp, #116	@ 0x74
 8003064:	9002      	str	r0, [sp, #8]
 8003066:	9006      	str	r0, [sp, #24]
 8003068:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800306c:	4809      	ldr	r0, [pc, #36]	@ (8003094 <siprintf+0x38>)
 800306e:	9107      	str	r1, [sp, #28]
 8003070:	9104      	str	r1, [sp, #16]
 8003072:	4909      	ldr	r1, [pc, #36]	@ (8003098 <siprintf+0x3c>)
 8003074:	f853 2b04 	ldr.w	r2, [r3], #4
 8003078:	9105      	str	r1, [sp, #20]
 800307a:	6800      	ldr	r0, [r0, #0]
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	a902      	add	r1, sp, #8
 8003080:	f000 f9a2 	bl	80033c8 <_svfiprintf_r>
 8003084:	9b02      	ldr	r3, [sp, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	b01c      	add	sp, #112	@ 0x70
 800308c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003090:	b003      	add	sp, #12
 8003092:	4770      	bx	lr
 8003094:	2000000c 	.word	0x2000000c
 8003098:	ffff0208 	.word	0xffff0208

0800309c <memset>:
 800309c:	4402      	add	r2, r0
 800309e:	4603      	mov	r3, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <__errno>:
 80030ac:	4b01      	ldr	r3, [pc, #4]	@ (80030b4 <__errno+0x8>)
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	2000000c 	.word	0x2000000c

080030b8 <__libc_init_array>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4d0d      	ldr	r5, [pc, #52]	@ (80030f0 <__libc_init_array+0x38>)
 80030bc:	4c0d      	ldr	r4, [pc, #52]	@ (80030f4 <__libc_init_array+0x3c>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	2600      	movs	r6, #0
 80030c4:	42a6      	cmp	r6, r4
 80030c6:	d109      	bne.n	80030dc <__libc_init_array+0x24>
 80030c8:	4d0b      	ldr	r5, [pc, #44]	@ (80030f8 <__libc_init_array+0x40>)
 80030ca:	4c0c      	ldr	r4, [pc, #48]	@ (80030fc <__libc_init_array+0x44>)
 80030cc:	f000 fc66 	bl	800399c <_init>
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	2600      	movs	r6, #0
 80030d6:	42a6      	cmp	r6, r4
 80030d8:	d105      	bne.n	80030e6 <__libc_init_array+0x2e>
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e0:	4798      	blx	r3
 80030e2:	3601      	adds	r6, #1
 80030e4:	e7ee      	b.n	80030c4 <__libc_init_array+0xc>
 80030e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ea:	4798      	blx	r3
 80030ec:	3601      	adds	r6, #1
 80030ee:	e7f2      	b.n	80030d6 <__libc_init_array+0x1e>
 80030f0:	080041a4 	.word	0x080041a4
 80030f4:	080041a4 	.word	0x080041a4
 80030f8:	080041a4 	.word	0x080041a4
 80030fc:	080041a8 	.word	0x080041a8

08003100 <__retarget_lock_acquire_recursive>:
 8003100:	4770      	bx	lr

08003102 <__retarget_lock_release_recursive>:
 8003102:	4770      	bx	lr

08003104 <memcpy>:
 8003104:	440a      	add	r2, r1
 8003106:	4291      	cmp	r1, r2
 8003108:	f100 33ff 	add.w	r3, r0, #4294967295
 800310c:	d100      	bne.n	8003110 <memcpy+0xc>
 800310e:	4770      	bx	lr
 8003110:	b510      	push	{r4, lr}
 8003112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800311a:	4291      	cmp	r1, r2
 800311c:	d1f9      	bne.n	8003112 <memcpy+0xe>
 800311e:	bd10      	pop	{r4, pc}

08003120 <_free_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4605      	mov	r5, r0
 8003124:	2900      	cmp	r1, #0
 8003126:	d041      	beq.n	80031ac <_free_r+0x8c>
 8003128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800312c:	1f0c      	subs	r4, r1, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	bfb8      	it	lt
 8003132:	18e4      	addlt	r4, r4, r3
 8003134:	f000 f8e0 	bl	80032f8 <__malloc_lock>
 8003138:	4a1d      	ldr	r2, [pc, #116]	@ (80031b0 <_free_r+0x90>)
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	b933      	cbnz	r3, 800314c <_free_r+0x2c>
 800313e:	6063      	str	r3, [r4, #4]
 8003140:	6014      	str	r4, [r2, #0]
 8003142:	4628      	mov	r0, r5
 8003144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003148:	f000 b8dc 	b.w	8003304 <__malloc_unlock>
 800314c:	42a3      	cmp	r3, r4
 800314e:	d908      	bls.n	8003162 <_free_r+0x42>
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	1821      	adds	r1, r4, r0
 8003154:	428b      	cmp	r3, r1
 8003156:	bf01      	itttt	eq
 8003158:	6819      	ldreq	r1, [r3, #0]
 800315a:	685b      	ldreq	r3, [r3, #4]
 800315c:	1809      	addeq	r1, r1, r0
 800315e:	6021      	streq	r1, [r4, #0]
 8003160:	e7ed      	b.n	800313e <_free_r+0x1e>
 8003162:	461a      	mov	r2, r3
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	b10b      	cbz	r3, 800316c <_free_r+0x4c>
 8003168:	42a3      	cmp	r3, r4
 800316a:	d9fa      	bls.n	8003162 <_free_r+0x42>
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	1850      	adds	r0, r2, r1
 8003170:	42a0      	cmp	r0, r4
 8003172:	d10b      	bne.n	800318c <_free_r+0x6c>
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	4401      	add	r1, r0
 8003178:	1850      	adds	r0, r2, r1
 800317a:	4283      	cmp	r3, r0
 800317c:	6011      	str	r1, [r2, #0]
 800317e:	d1e0      	bne.n	8003142 <_free_r+0x22>
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	6053      	str	r3, [r2, #4]
 8003186:	4408      	add	r0, r1
 8003188:	6010      	str	r0, [r2, #0]
 800318a:	e7da      	b.n	8003142 <_free_r+0x22>
 800318c:	d902      	bls.n	8003194 <_free_r+0x74>
 800318e:	230c      	movs	r3, #12
 8003190:	602b      	str	r3, [r5, #0]
 8003192:	e7d6      	b.n	8003142 <_free_r+0x22>
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	1821      	adds	r1, r4, r0
 8003198:	428b      	cmp	r3, r1
 800319a:	bf04      	itt	eq
 800319c:	6819      	ldreq	r1, [r3, #0]
 800319e:	685b      	ldreq	r3, [r3, #4]
 80031a0:	6063      	str	r3, [r4, #4]
 80031a2:	bf04      	itt	eq
 80031a4:	1809      	addeq	r1, r1, r0
 80031a6:	6021      	streq	r1, [r4, #0]
 80031a8:	6054      	str	r4, [r2, #4]
 80031aa:	e7ca      	b.n	8003142 <_free_r+0x22>
 80031ac:	bd38      	pop	{r3, r4, r5, pc}
 80031ae:	bf00      	nop
 80031b0:	20000668 	.word	0x20000668

080031b4 <sbrk_aligned>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4e0f      	ldr	r6, [pc, #60]	@ (80031f4 <sbrk_aligned+0x40>)
 80031b8:	460c      	mov	r4, r1
 80031ba:	6831      	ldr	r1, [r6, #0]
 80031bc:	4605      	mov	r5, r0
 80031be:	b911      	cbnz	r1, 80031c6 <sbrk_aligned+0x12>
 80031c0:	f000 fba6 	bl	8003910 <_sbrk_r>
 80031c4:	6030      	str	r0, [r6, #0]
 80031c6:	4621      	mov	r1, r4
 80031c8:	4628      	mov	r0, r5
 80031ca:	f000 fba1 	bl	8003910 <_sbrk_r>
 80031ce:	1c43      	adds	r3, r0, #1
 80031d0:	d103      	bne.n	80031da <sbrk_aligned+0x26>
 80031d2:	f04f 34ff 	mov.w	r4, #4294967295
 80031d6:	4620      	mov	r0, r4
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	1cc4      	adds	r4, r0, #3
 80031dc:	f024 0403 	bic.w	r4, r4, #3
 80031e0:	42a0      	cmp	r0, r4
 80031e2:	d0f8      	beq.n	80031d6 <sbrk_aligned+0x22>
 80031e4:	1a21      	subs	r1, r4, r0
 80031e6:	4628      	mov	r0, r5
 80031e8:	f000 fb92 	bl	8003910 <_sbrk_r>
 80031ec:	3001      	adds	r0, #1
 80031ee:	d1f2      	bne.n	80031d6 <sbrk_aligned+0x22>
 80031f0:	e7ef      	b.n	80031d2 <sbrk_aligned+0x1e>
 80031f2:	bf00      	nop
 80031f4:	20000664 	.word	0x20000664

080031f8 <_malloc_r>:
 80031f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031fc:	1ccd      	adds	r5, r1, #3
 80031fe:	f025 0503 	bic.w	r5, r5, #3
 8003202:	3508      	adds	r5, #8
 8003204:	2d0c      	cmp	r5, #12
 8003206:	bf38      	it	cc
 8003208:	250c      	movcc	r5, #12
 800320a:	2d00      	cmp	r5, #0
 800320c:	4606      	mov	r6, r0
 800320e:	db01      	blt.n	8003214 <_malloc_r+0x1c>
 8003210:	42a9      	cmp	r1, r5
 8003212:	d904      	bls.n	800321e <_malloc_r+0x26>
 8003214:	230c      	movs	r3, #12
 8003216:	6033      	str	r3, [r6, #0]
 8003218:	2000      	movs	r0, #0
 800321a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800321e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032f4 <_malloc_r+0xfc>
 8003222:	f000 f869 	bl	80032f8 <__malloc_lock>
 8003226:	f8d8 3000 	ldr.w	r3, [r8]
 800322a:	461c      	mov	r4, r3
 800322c:	bb44      	cbnz	r4, 8003280 <_malloc_r+0x88>
 800322e:	4629      	mov	r1, r5
 8003230:	4630      	mov	r0, r6
 8003232:	f7ff ffbf 	bl	80031b4 <sbrk_aligned>
 8003236:	1c43      	adds	r3, r0, #1
 8003238:	4604      	mov	r4, r0
 800323a:	d158      	bne.n	80032ee <_malloc_r+0xf6>
 800323c:	f8d8 4000 	ldr.w	r4, [r8]
 8003240:	4627      	mov	r7, r4
 8003242:	2f00      	cmp	r7, #0
 8003244:	d143      	bne.n	80032ce <_malloc_r+0xd6>
 8003246:	2c00      	cmp	r4, #0
 8003248:	d04b      	beq.n	80032e2 <_malloc_r+0xea>
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	4639      	mov	r1, r7
 800324e:	4630      	mov	r0, r6
 8003250:	eb04 0903 	add.w	r9, r4, r3
 8003254:	f000 fb5c 	bl	8003910 <_sbrk_r>
 8003258:	4581      	cmp	r9, r0
 800325a:	d142      	bne.n	80032e2 <_malloc_r+0xea>
 800325c:	6821      	ldr	r1, [r4, #0]
 800325e:	1a6d      	subs	r5, r5, r1
 8003260:	4629      	mov	r1, r5
 8003262:	4630      	mov	r0, r6
 8003264:	f7ff ffa6 	bl	80031b4 <sbrk_aligned>
 8003268:	3001      	adds	r0, #1
 800326a:	d03a      	beq.n	80032e2 <_malloc_r+0xea>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	442b      	add	r3, r5
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	f8d8 3000 	ldr.w	r3, [r8]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	bb62      	cbnz	r2, 80032d4 <_malloc_r+0xdc>
 800327a:	f8c8 7000 	str.w	r7, [r8]
 800327e:	e00f      	b.n	80032a0 <_malloc_r+0xa8>
 8003280:	6822      	ldr	r2, [r4, #0]
 8003282:	1b52      	subs	r2, r2, r5
 8003284:	d420      	bmi.n	80032c8 <_malloc_r+0xd0>
 8003286:	2a0b      	cmp	r2, #11
 8003288:	d917      	bls.n	80032ba <_malloc_r+0xc2>
 800328a:	1961      	adds	r1, r4, r5
 800328c:	42a3      	cmp	r3, r4
 800328e:	6025      	str	r5, [r4, #0]
 8003290:	bf18      	it	ne
 8003292:	6059      	strne	r1, [r3, #4]
 8003294:	6863      	ldr	r3, [r4, #4]
 8003296:	bf08      	it	eq
 8003298:	f8c8 1000 	streq.w	r1, [r8]
 800329c:	5162      	str	r2, [r4, r5]
 800329e:	604b      	str	r3, [r1, #4]
 80032a0:	4630      	mov	r0, r6
 80032a2:	f000 f82f 	bl	8003304 <__malloc_unlock>
 80032a6:	f104 000b 	add.w	r0, r4, #11
 80032aa:	1d23      	adds	r3, r4, #4
 80032ac:	f020 0007 	bic.w	r0, r0, #7
 80032b0:	1ac2      	subs	r2, r0, r3
 80032b2:	bf1c      	itt	ne
 80032b4:	1a1b      	subne	r3, r3, r0
 80032b6:	50a3      	strne	r3, [r4, r2]
 80032b8:	e7af      	b.n	800321a <_malloc_r+0x22>
 80032ba:	6862      	ldr	r2, [r4, #4]
 80032bc:	42a3      	cmp	r3, r4
 80032be:	bf0c      	ite	eq
 80032c0:	f8c8 2000 	streq.w	r2, [r8]
 80032c4:	605a      	strne	r2, [r3, #4]
 80032c6:	e7eb      	b.n	80032a0 <_malloc_r+0xa8>
 80032c8:	4623      	mov	r3, r4
 80032ca:	6864      	ldr	r4, [r4, #4]
 80032cc:	e7ae      	b.n	800322c <_malloc_r+0x34>
 80032ce:	463c      	mov	r4, r7
 80032d0:	687f      	ldr	r7, [r7, #4]
 80032d2:	e7b6      	b.n	8003242 <_malloc_r+0x4a>
 80032d4:	461a      	mov	r2, r3
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	42a3      	cmp	r3, r4
 80032da:	d1fb      	bne.n	80032d4 <_malloc_r+0xdc>
 80032dc:	2300      	movs	r3, #0
 80032de:	6053      	str	r3, [r2, #4]
 80032e0:	e7de      	b.n	80032a0 <_malloc_r+0xa8>
 80032e2:	230c      	movs	r3, #12
 80032e4:	6033      	str	r3, [r6, #0]
 80032e6:	4630      	mov	r0, r6
 80032e8:	f000 f80c 	bl	8003304 <__malloc_unlock>
 80032ec:	e794      	b.n	8003218 <_malloc_r+0x20>
 80032ee:	6005      	str	r5, [r0, #0]
 80032f0:	e7d6      	b.n	80032a0 <_malloc_r+0xa8>
 80032f2:	bf00      	nop
 80032f4:	20000668 	.word	0x20000668

080032f8 <__malloc_lock>:
 80032f8:	4801      	ldr	r0, [pc, #4]	@ (8003300 <__malloc_lock+0x8>)
 80032fa:	f7ff bf01 	b.w	8003100 <__retarget_lock_acquire_recursive>
 80032fe:	bf00      	nop
 8003300:	20000660 	.word	0x20000660

08003304 <__malloc_unlock>:
 8003304:	4801      	ldr	r0, [pc, #4]	@ (800330c <__malloc_unlock+0x8>)
 8003306:	f7ff befc 	b.w	8003102 <__retarget_lock_release_recursive>
 800330a:	bf00      	nop
 800330c:	20000660 	.word	0x20000660

08003310 <__ssputs_r>:
 8003310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003314:	688e      	ldr	r6, [r1, #8]
 8003316:	461f      	mov	r7, r3
 8003318:	42be      	cmp	r6, r7
 800331a:	680b      	ldr	r3, [r1, #0]
 800331c:	4682      	mov	sl, r0
 800331e:	460c      	mov	r4, r1
 8003320:	4690      	mov	r8, r2
 8003322:	d82d      	bhi.n	8003380 <__ssputs_r+0x70>
 8003324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003328:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800332c:	d026      	beq.n	800337c <__ssputs_r+0x6c>
 800332e:	6965      	ldr	r5, [r4, #20]
 8003330:	6909      	ldr	r1, [r1, #16]
 8003332:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003336:	eba3 0901 	sub.w	r9, r3, r1
 800333a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800333e:	1c7b      	adds	r3, r7, #1
 8003340:	444b      	add	r3, r9
 8003342:	106d      	asrs	r5, r5, #1
 8003344:	429d      	cmp	r5, r3
 8003346:	bf38      	it	cc
 8003348:	461d      	movcc	r5, r3
 800334a:	0553      	lsls	r3, r2, #21
 800334c:	d527      	bpl.n	800339e <__ssputs_r+0x8e>
 800334e:	4629      	mov	r1, r5
 8003350:	f7ff ff52 	bl	80031f8 <_malloc_r>
 8003354:	4606      	mov	r6, r0
 8003356:	b360      	cbz	r0, 80033b2 <__ssputs_r+0xa2>
 8003358:	6921      	ldr	r1, [r4, #16]
 800335a:	464a      	mov	r2, r9
 800335c:	f7ff fed2 	bl	8003104 <memcpy>
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336a:	81a3      	strh	r3, [r4, #12]
 800336c:	6126      	str	r6, [r4, #16]
 800336e:	6165      	str	r5, [r4, #20]
 8003370:	444e      	add	r6, r9
 8003372:	eba5 0509 	sub.w	r5, r5, r9
 8003376:	6026      	str	r6, [r4, #0]
 8003378:	60a5      	str	r5, [r4, #8]
 800337a:	463e      	mov	r6, r7
 800337c:	42be      	cmp	r6, r7
 800337e:	d900      	bls.n	8003382 <__ssputs_r+0x72>
 8003380:	463e      	mov	r6, r7
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	4632      	mov	r2, r6
 8003386:	4641      	mov	r1, r8
 8003388:	f000 faa8 	bl	80038dc <memmove>
 800338c:	68a3      	ldr	r3, [r4, #8]
 800338e:	1b9b      	subs	r3, r3, r6
 8003390:	60a3      	str	r3, [r4, #8]
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	4433      	add	r3, r6
 8003396:	6023      	str	r3, [r4, #0]
 8003398:	2000      	movs	r0, #0
 800339a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339e:	462a      	mov	r2, r5
 80033a0:	f000 fac6 	bl	8003930 <_realloc_r>
 80033a4:	4606      	mov	r6, r0
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d1e0      	bne.n	800336c <__ssputs_r+0x5c>
 80033aa:	6921      	ldr	r1, [r4, #16]
 80033ac:	4650      	mov	r0, sl
 80033ae:	f7ff feb7 	bl	8003120 <_free_r>
 80033b2:	230c      	movs	r3, #12
 80033b4:	f8ca 3000 	str.w	r3, [sl]
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	e7e9      	b.n	800339a <__ssputs_r+0x8a>
	...

080033c8 <_svfiprintf_r>:
 80033c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033cc:	4698      	mov	r8, r3
 80033ce:	898b      	ldrh	r3, [r1, #12]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	b09d      	sub	sp, #116	@ 0x74
 80033d4:	4607      	mov	r7, r0
 80033d6:	460d      	mov	r5, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	d510      	bpl.n	80033fe <_svfiprintf_r+0x36>
 80033dc:	690b      	ldr	r3, [r1, #16]
 80033de:	b973      	cbnz	r3, 80033fe <_svfiprintf_r+0x36>
 80033e0:	2140      	movs	r1, #64	@ 0x40
 80033e2:	f7ff ff09 	bl	80031f8 <_malloc_r>
 80033e6:	6028      	str	r0, [r5, #0]
 80033e8:	6128      	str	r0, [r5, #16]
 80033ea:	b930      	cbnz	r0, 80033fa <_svfiprintf_r+0x32>
 80033ec:	230c      	movs	r3, #12
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	b01d      	add	sp, #116	@ 0x74
 80033f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033fa:	2340      	movs	r3, #64	@ 0x40
 80033fc:	616b      	str	r3, [r5, #20]
 80033fe:	2300      	movs	r3, #0
 8003400:	9309      	str	r3, [sp, #36]	@ 0x24
 8003402:	2320      	movs	r3, #32
 8003404:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003408:	f8cd 800c 	str.w	r8, [sp, #12]
 800340c:	2330      	movs	r3, #48	@ 0x30
 800340e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80035ac <_svfiprintf_r+0x1e4>
 8003412:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003416:	f04f 0901 	mov.w	r9, #1
 800341a:	4623      	mov	r3, r4
 800341c:	469a      	mov	sl, r3
 800341e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003422:	b10a      	cbz	r2, 8003428 <_svfiprintf_r+0x60>
 8003424:	2a25      	cmp	r2, #37	@ 0x25
 8003426:	d1f9      	bne.n	800341c <_svfiprintf_r+0x54>
 8003428:	ebba 0b04 	subs.w	fp, sl, r4
 800342c:	d00b      	beq.n	8003446 <_svfiprintf_r+0x7e>
 800342e:	465b      	mov	r3, fp
 8003430:	4622      	mov	r2, r4
 8003432:	4629      	mov	r1, r5
 8003434:	4638      	mov	r0, r7
 8003436:	f7ff ff6b 	bl	8003310 <__ssputs_r>
 800343a:	3001      	adds	r0, #1
 800343c:	f000 80a7 	beq.w	800358e <_svfiprintf_r+0x1c6>
 8003440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003442:	445a      	add	r2, fp
 8003444:	9209      	str	r2, [sp, #36]	@ 0x24
 8003446:	f89a 3000 	ldrb.w	r3, [sl]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 809f 	beq.w	800358e <_svfiprintf_r+0x1c6>
 8003450:	2300      	movs	r3, #0
 8003452:	f04f 32ff 	mov.w	r2, #4294967295
 8003456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800345a:	f10a 0a01 	add.w	sl, sl, #1
 800345e:	9304      	str	r3, [sp, #16]
 8003460:	9307      	str	r3, [sp, #28]
 8003462:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003466:	931a      	str	r3, [sp, #104]	@ 0x68
 8003468:	4654      	mov	r4, sl
 800346a:	2205      	movs	r2, #5
 800346c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003470:	484e      	ldr	r0, [pc, #312]	@ (80035ac <_svfiprintf_r+0x1e4>)
 8003472:	f7fc fead 	bl	80001d0 <memchr>
 8003476:	9a04      	ldr	r2, [sp, #16]
 8003478:	b9d8      	cbnz	r0, 80034b2 <_svfiprintf_r+0xea>
 800347a:	06d0      	lsls	r0, r2, #27
 800347c:	bf44      	itt	mi
 800347e:	2320      	movmi	r3, #32
 8003480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003484:	0711      	lsls	r1, r2, #28
 8003486:	bf44      	itt	mi
 8003488:	232b      	movmi	r3, #43	@ 0x2b
 800348a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800348e:	f89a 3000 	ldrb.w	r3, [sl]
 8003492:	2b2a      	cmp	r3, #42	@ 0x2a
 8003494:	d015      	beq.n	80034c2 <_svfiprintf_r+0xfa>
 8003496:	9a07      	ldr	r2, [sp, #28]
 8003498:	4654      	mov	r4, sl
 800349a:	2000      	movs	r0, #0
 800349c:	f04f 0c0a 	mov.w	ip, #10
 80034a0:	4621      	mov	r1, r4
 80034a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034a6:	3b30      	subs	r3, #48	@ 0x30
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d94b      	bls.n	8003544 <_svfiprintf_r+0x17c>
 80034ac:	b1b0      	cbz	r0, 80034dc <_svfiprintf_r+0x114>
 80034ae:	9207      	str	r2, [sp, #28]
 80034b0:	e014      	b.n	80034dc <_svfiprintf_r+0x114>
 80034b2:	eba0 0308 	sub.w	r3, r0, r8
 80034b6:	fa09 f303 	lsl.w	r3, r9, r3
 80034ba:	4313      	orrs	r3, r2
 80034bc:	9304      	str	r3, [sp, #16]
 80034be:	46a2      	mov	sl, r4
 80034c0:	e7d2      	b.n	8003468 <_svfiprintf_r+0xa0>
 80034c2:	9b03      	ldr	r3, [sp, #12]
 80034c4:	1d19      	adds	r1, r3, #4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	9103      	str	r1, [sp, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bfbb      	ittet	lt
 80034ce:	425b      	neglt	r3, r3
 80034d0:	f042 0202 	orrlt.w	r2, r2, #2
 80034d4:	9307      	strge	r3, [sp, #28]
 80034d6:	9307      	strlt	r3, [sp, #28]
 80034d8:	bfb8      	it	lt
 80034da:	9204      	strlt	r2, [sp, #16]
 80034dc:	7823      	ldrb	r3, [r4, #0]
 80034de:	2b2e      	cmp	r3, #46	@ 0x2e
 80034e0:	d10a      	bne.n	80034f8 <_svfiprintf_r+0x130>
 80034e2:	7863      	ldrb	r3, [r4, #1]
 80034e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80034e6:	d132      	bne.n	800354e <_svfiprintf_r+0x186>
 80034e8:	9b03      	ldr	r3, [sp, #12]
 80034ea:	1d1a      	adds	r2, r3, #4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	9203      	str	r2, [sp, #12]
 80034f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034f4:	3402      	adds	r4, #2
 80034f6:	9305      	str	r3, [sp, #20]
 80034f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80035bc <_svfiprintf_r+0x1f4>
 80034fc:	7821      	ldrb	r1, [r4, #0]
 80034fe:	2203      	movs	r2, #3
 8003500:	4650      	mov	r0, sl
 8003502:	f7fc fe65 	bl	80001d0 <memchr>
 8003506:	b138      	cbz	r0, 8003518 <_svfiprintf_r+0x150>
 8003508:	9b04      	ldr	r3, [sp, #16]
 800350a:	eba0 000a 	sub.w	r0, r0, sl
 800350e:	2240      	movs	r2, #64	@ 0x40
 8003510:	4082      	lsls	r2, r0
 8003512:	4313      	orrs	r3, r2
 8003514:	3401      	adds	r4, #1
 8003516:	9304      	str	r3, [sp, #16]
 8003518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800351c:	4824      	ldr	r0, [pc, #144]	@ (80035b0 <_svfiprintf_r+0x1e8>)
 800351e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003522:	2206      	movs	r2, #6
 8003524:	f7fc fe54 	bl	80001d0 <memchr>
 8003528:	2800      	cmp	r0, #0
 800352a:	d036      	beq.n	800359a <_svfiprintf_r+0x1d2>
 800352c:	4b21      	ldr	r3, [pc, #132]	@ (80035b4 <_svfiprintf_r+0x1ec>)
 800352e:	bb1b      	cbnz	r3, 8003578 <_svfiprintf_r+0x1b0>
 8003530:	9b03      	ldr	r3, [sp, #12]
 8003532:	3307      	adds	r3, #7
 8003534:	f023 0307 	bic.w	r3, r3, #7
 8003538:	3308      	adds	r3, #8
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800353e:	4433      	add	r3, r6
 8003540:	9309      	str	r3, [sp, #36]	@ 0x24
 8003542:	e76a      	b.n	800341a <_svfiprintf_r+0x52>
 8003544:	fb0c 3202 	mla	r2, ip, r2, r3
 8003548:	460c      	mov	r4, r1
 800354a:	2001      	movs	r0, #1
 800354c:	e7a8      	b.n	80034a0 <_svfiprintf_r+0xd8>
 800354e:	2300      	movs	r3, #0
 8003550:	3401      	adds	r4, #1
 8003552:	9305      	str	r3, [sp, #20]
 8003554:	4619      	mov	r1, r3
 8003556:	f04f 0c0a 	mov.w	ip, #10
 800355a:	4620      	mov	r0, r4
 800355c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003560:	3a30      	subs	r2, #48	@ 0x30
 8003562:	2a09      	cmp	r2, #9
 8003564:	d903      	bls.n	800356e <_svfiprintf_r+0x1a6>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0c6      	beq.n	80034f8 <_svfiprintf_r+0x130>
 800356a:	9105      	str	r1, [sp, #20]
 800356c:	e7c4      	b.n	80034f8 <_svfiprintf_r+0x130>
 800356e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003572:	4604      	mov	r4, r0
 8003574:	2301      	movs	r3, #1
 8003576:	e7f0      	b.n	800355a <_svfiprintf_r+0x192>
 8003578:	ab03      	add	r3, sp, #12
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	462a      	mov	r2, r5
 800357e:	4b0e      	ldr	r3, [pc, #56]	@ (80035b8 <_svfiprintf_r+0x1f0>)
 8003580:	a904      	add	r1, sp, #16
 8003582:	4638      	mov	r0, r7
 8003584:	f3af 8000 	nop.w
 8003588:	1c42      	adds	r2, r0, #1
 800358a:	4606      	mov	r6, r0
 800358c:	d1d6      	bne.n	800353c <_svfiprintf_r+0x174>
 800358e:	89ab      	ldrh	r3, [r5, #12]
 8003590:	065b      	lsls	r3, r3, #25
 8003592:	f53f af2d 	bmi.w	80033f0 <_svfiprintf_r+0x28>
 8003596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003598:	e72c      	b.n	80033f4 <_svfiprintf_r+0x2c>
 800359a:	ab03      	add	r3, sp, #12
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	462a      	mov	r2, r5
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <_svfiprintf_r+0x1f0>)
 80035a2:	a904      	add	r1, sp, #16
 80035a4:	4638      	mov	r0, r7
 80035a6:	f000 f879 	bl	800369c <_printf_i>
 80035aa:	e7ed      	b.n	8003588 <_svfiprintf_r+0x1c0>
 80035ac:	08004168 	.word	0x08004168
 80035b0:	08004172 	.word	0x08004172
 80035b4:	00000000 	.word	0x00000000
 80035b8:	08003311 	.word	0x08003311
 80035bc:	0800416e 	.word	0x0800416e

080035c0 <_printf_common>:
 80035c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	4616      	mov	r6, r2
 80035c6:	4698      	mov	r8, r3
 80035c8:	688a      	ldr	r2, [r1, #8]
 80035ca:	690b      	ldr	r3, [r1, #16]
 80035cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bfb8      	it	lt
 80035d4:	4613      	movlt	r3, r2
 80035d6:	6033      	str	r3, [r6, #0]
 80035d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035dc:	4607      	mov	r7, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	b10a      	cbz	r2, 80035e6 <_printf_common+0x26>
 80035e2:	3301      	adds	r3, #1
 80035e4:	6033      	str	r3, [r6, #0]
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	0699      	lsls	r1, r3, #26
 80035ea:	bf42      	ittt	mi
 80035ec:	6833      	ldrmi	r3, [r6, #0]
 80035ee:	3302      	addmi	r3, #2
 80035f0:	6033      	strmi	r3, [r6, #0]
 80035f2:	6825      	ldr	r5, [r4, #0]
 80035f4:	f015 0506 	ands.w	r5, r5, #6
 80035f8:	d106      	bne.n	8003608 <_printf_common+0x48>
 80035fa:	f104 0a19 	add.w	sl, r4, #25
 80035fe:	68e3      	ldr	r3, [r4, #12]
 8003600:	6832      	ldr	r2, [r6, #0]
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	42ab      	cmp	r3, r5
 8003606:	dc26      	bgt.n	8003656 <_printf_common+0x96>
 8003608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	3b00      	subs	r3, #0
 8003610:	bf18      	it	ne
 8003612:	2301      	movne	r3, #1
 8003614:	0692      	lsls	r2, r2, #26
 8003616:	d42b      	bmi.n	8003670 <_printf_common+0xb0>
 8003618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800361c:	4641      	mov	r1, r8
 800361e:	4638      	mov	r0, r7
 8003620:	47c8      	blx	r9
 8003622:	3001      	adds	r0, #1
 8003624:	d01e      	beq.n	8003664 <_printf_common+0xa4>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	6922      	ldr	r2, [r4, #16]
 800362a:	f003 0306 	and.w	r3, r3, #6
 800362e:	2b04      	cmp	r3, #4
 8003630:	bf02      	ittt	eq
 8003632:	68e5      	ldreq	r5, [r4, #12]
 8003634:	6833      	ldreq	r3, [r6, #0]
 8003636:	1aed      	subeq	r5, r5, r3
 8003638:	68a3      	ldr	r3, [r4, #8]
 800363a:	bf0c      	ite	eq
 800363c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003640:	2500      	movne	r5, #0
 8003642:	4293      	cmp	r3, r2
 8003644:	bfc4      	itt	gt
 8003646:	1a9b      	subgt	r3, r3, r2
 8003648:	18ed      	addgt	r5, r5, r3
 800364a:	2600      	movs	r6, #0
 800364c:	341a      	adds	r4, #26
 800364e:	42b5      	cmp	r5, r6
 8003650:	d11a      	bne.n	8003688 <_printf_common+0xc8>
 8003652:	2000      	movs	r0, #0
 8003654:	e008      	b.n	8003668 <_printf_common+0xa8>
 8003656:	2301      	movs	r3, #1
 8003658:	4652      	mov	r2, sl
 800365a:	4641      	mov	r1, r8
 800365c:	4638      	mov	r0, r7
 800365e:	47c8      	blx	r9
 8003660:	3001      	adds	r0, #1
 8003662:	d103      	bne.n	800366c <_printf_common+0xac>
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366c:	3501      	adds	r5, #1
 800366e:	e7c6      	b.n	80035fe <_printf_common+0x3e>
 8003670:	18e1      	adds	r1, r4, r3
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	2030      	movs	r0, #48	@ 0x30
 8003676:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800367a:	4422      	add	r2, r4
 800367c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003684:	3302      	adds	r3, #2
 8003686:	e7c7      	b.n	8003618 <_printf_common+0x58>
 8003688:	2301      	movs	r3, #1
 800368a:	4622      	mov	r2, r4
 800368c:	4641      	mov	r1, r8
 800368e:	4638      	mov	r0, r7
 8003690:	47c8      	blx	r9
 8003692:	3001      	adds	r0, #1
 8003694:	d0e6      	beq.n	8003664 <_printf_common+0xa4>
 8003696:	3601      	adds	r6, #1
 8003698:	e7d9      	b.n	800364e <_printf_common+0x8e>
	...

0800369c <_printf_i>:
 800369c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a0:	7e0f      	ldrb	r7, [r1, #24]
 80036a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80036a4:	2f78      	cmp	r7, #120	@ 0x78
 80036a6:	4691      	mov	r9, r2
 80036a8:	4680      	mov	r8, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	469a      	mov	sl, r3
 80036ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80036b2:	d807      	bhi.n	80036c4 <_printf_i+0x28>
 80036b4:	2f62      	cmp	r7, #98	@ 0x62
 80036b6:	d80a      	bhi.n	80036ce <_printf_i+0x32>
 80036b8:	2f00      	cmp	r7, #0
 80036ba:	f000 80d2 	beq.w	8003862 <_printf_i+0x1c6>
 80036be:	2f58      	cmp	r7, #88	@ 0x58
 80036c0:	f000 80b9 	beq.w	8003836 <_printf_i+0x19a>
 80036c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036cc:	e03a      	b.n	8003744 <_printf_i+0xa8>
 80036ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036d2:	2b15      	cmp	r3, #21
 80036d4:	d8f6      	bhi.n	80036c4 <_printf_i+0x28>
 80036d6:	a101      	add	r1, pc, #4	@ (adr r1, 80036dc <_printf_i+0x40>)
 80036d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036dc:	08003735 	.word	0x08003735
 80036e0:	08003749 	.word	0x08003749
 80036e4:	080036c5 	.word	0x080036c5
 80036e8:	080036c5 	.word	0x080036c5
 80036ec:	080036c5 	.word	0x080036c5
 80036f0:	080036c5 	.word	0x080036c5
 80036f4:	08003749 	.word	0x08003749
 80036f8:	080036c5 	.word	0x080036c5
 80036fc:	080036c5 	.word	0x080036c5
 8003700:	080036c5 	.word	0x080036c5
 8003704:	080036c5 	.word	0x080036c5
 8003708:	08003849 	.word	0x08003849
 800370c:	08003773 	.word	0x08003773
 8003710:	08003803 	.word	0x08003803
 8003714:	080036c5 	.word	0x080036c5
 8003718:	080036c5 	.word	0x080036c5
 800371c:	0800386b 	.word	0x0800386b
 8003720:	080036c5 	.word	0x080036c5
 8003724:	08003773 	.word	0x08003773
 8003728:	080036c5 	.word	0x080036c5
 800372c:	080036c5 	.word	0x080036c5
 8003730:	0800380b 	.word	0x0800380b
 8003734:	6833      	ldr	r3, [r6, #0]
 8003736:	1d1a      	adds	r2, r3, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6032      	str	r2, [r6, #0]
 800373c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003740:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003744:	2301      	movs	r3, #1
 8003746:	e09d      	b.n	8003884 <_printf_i+0x1e8>
 8003748:	6833      	ldr	r3, [r6, #0]
 800374a:	6820      	ldr	r0, [r4, #0]
 800374c:	1d19      	adds	r1, r3, #4
 800374e:	6031      	str	r1, [r6, #0]
 8003750:	0606      	lsls	r6, r0, #24
 8003752:	d501      	bpl.n	8003758 <_printf_i+0xbc>
 8003754:	681d      	ldr	r5, [r3, #0]
 8003756:	e003      	b.n	8003760 <_printf_i+0xc4>
 8003758:	0645      	lsls	r5, r0, #25
 800375a:	d5fb      	bpl.n	8003754 <_printf_i+0xb8>
 800375c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003760:	2d00      	cmp	r5, #0
 8003762:	da03      	bge.n	800376c <_printf_i+0xd0>
 8003764:	232d      	movs	r3, #45	@ 0x2d
 8003766:	426d      	negs	r5, r5
 8003768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800376c:	4859      	ldr	r0, [pc, #356]	@ (80038d4 <_printf_i+0x238>)
 800376e:	230a      	movs	r3, #10
 8003770:	e011      	b.n	8003796 <_printf_i+0xfa>
 8003772:	6821      	ldr	r1, [r4, #0]
 8003774:	6833      	ldr	r3, [r6, #0]
 8003776:	0608      	lsls	r0, r1, #24
 8003778:	f853 5b04 	ldr.w	r5, [r3], #4
 800377c:	d402      	bmi.n	8003784 <_printf_i+0xe8>
 800377e:	0649      	lsls	r1, r1, #25
 8003780:	bf48      	it	mi
 8003782:	b2ad      	uxthmi	r5, r5
 8003784:	2f6f      	cmp	r7, #111	@ 0x6f
 8003786:	4853      	ldr	r0, [pc, #332]	@ (80038d4 <_printf_i+0x238>)
 8003788:	6033      	str	r3, [r6, #0]
 800378a:	bf14      	ite	ne
 800378c:	230a      	movne	r3, #10
 800378e:	2308      	moveq	r3, #8
 8003790:	2100      	movs	r1, #0
 8003792:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003796:	6866      	ldr	r6, [r4, #4]
 8003798:	60a6      	str	r6, [r4, #8]
 800379a:	2e00      	cmp	r6, #0
 800379c:	bfa2      	ittt	ge
 800379e:	6821      	ldrge	r1, [r4, #0]
 80037a0:	f021 0104 	bicge.w	r1, r1, #4
 80037a4:	6021      	strge	r1, [r4, #0]
 80037a6:	b90d      	cbnz	r5, 80037ac <_printf_i+0x110>
 80037a8:	2e00      	cmp	r6, #0
 80037aa:	d04b      	beq.n	8003844 <_printf_i+0x1a8>
 80037ac:	4616      	mov	r6, r2
 80037ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80037b2:	fb03 5711 	mls	r7, r3, r1, r5
 80037b6:	5dc7      	ldrb	r7, [r0, r7]
 80037b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037bc:	462f      	mov	r7, r5
 80037be:	42bb      	cmp	r3, r7
 80037c0:	460d      	mov	r5, r1
 80037c2:	d9f4      	bls.n	80037ae <_printf_i+0x112>
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d10b      	bne.n	80037e0 <_printf_i+0x144>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	07df      	lsls	r7, r3, #31
 80037cc:	d508      	bpl.n	80037e0 <_printf_i+0x144>
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	6861      	ldr	r1, [r4, #4]
 80037d2:	4299      	cmp	r1, r3
 80037d4:	bfde      	ittt	le
 80037d6:	2330      	movle	r3, #48	@ 0x30
 80037d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037e0:	1b92      	subs	r2, r2, r6
 80037e2:	6122      	str	r2, [r4, #16]
 80037e4:	f8cd a000 	str.w	sl, [sp]
 80037e8:	464b      	mov	r3, r9
 80037ea:	aa03      	add	r2, sp, #12
 80037ec:	4621      	mov	r1, r4
 80037ee:	4640      	mov	r0, r8
 80037f0:	f7ff fee6 	bl	80035c0 <_printf_common>
 80037f4:	3001      	adds	r0, #1
 80037f6:	d14a      	bne.n	800388e <_printf_i+0x1f2>
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	b004      	add	sp, #16
 80037fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	f043 0320 	orr.w	r3, r3, #32
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	4833      	ldr	r0, [pc, #204]	@ (80038d8 <_printf_i+0x23c>)
 800380c:	2778      	movs	r7, #120	@ 0x78
 800380e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	6831      	ldr	r1, [r6, #0]
 8003816:	061f      	lsls	r7, r3, #24
 8003818:	f851 5b04 	ldr.w	r5, [r1], #4
 800381c:	d402      	bmi.n	8003824 <_printf_i+0x188>
 800381e:	065f      	lsls	r7, r3, #25
 8003820:	bf48      	it	mi
 8003822:	b2ad      	uxthmi	r5, r5
 8003824:	6031      	str	r1, [r6, #0]
 8003826:	07d9      	lsls	r1, r3, #31
 8003828:	bf44      	itt	mi
 800382a:	f043 0320 	orrmi.w	r3, r3, #32
 800382e:	6023      	strmi	r3, [r4, #0]
 8003830:	b11d      	cbz	r5, 800383a <_printf_i+0x19e>
 8003832:	2310      	movs	r3, #16
 8003834:	e7ac      	b.n	8003790 <_printf_i+0xf4>
 8003836:	4827      	ldr	r0, [pc, #156]	@ (80038d4 <_printf_i+0x238>)
 8003838:	e7e9      	b.n	800380e <_printf_i+0x172>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	f023 0320 	bic.w	r3, r3, #32
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	e7f6      	b.n	8003832 <_printf_i+0x196>
 8003844:	4616      	mov	r6, r2
 8003846:	e7bd      	b.n	80037c4 <_printf_i+0x128>
 8003848:	6833      	ldr	r3, [r6, #0]
 800384a:	6825      	ldr	r5, [r4, #0]
 800384c:	6961      	ldr	r1, [r4, #20]
 800384e:	1d18      	adds	r0, r3, #4
 8003850:	6030      	str	r0, [r6, #0]
 8003852:	062e      	lsls	r6, r5, #24
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	d501      	bpl.n	800385c <_printf_i+0x1c0>
 8003858:	6019      	str	r1, [r3, #0]
 800385a:	e002      	b.n	8003862 <_printf_i+0x1c6>
 800385c:	0668      	lsls	r0, r5, #25
 800385e:	d5fb      	bpl.n	8003858 <_printf_i+0x1bc>
 8003860:	8019      	strh	r1, [r3, #0]
 8003862:	2300      	movs	r3, #0
 8003864:	6123      	str	r3, [r4, #16]
 8003866:	4616      	mov	r6, r2
 8003868:	e7bc      	b.n	80037e4 <_printf_i+0x148>
 800386a:	6833      	ldr	r3, [r6, #0]
 800386c:	1d1a      	adds	r2, r3, #4
 800386e:	6032      	str	r2, [r6, #0]
 8003870:	681e      	ldr	r6, [r3, #0]
 8003872:	6862      	ldr	r2, [r4, #4]
 8003874:	2100      	movs	r1, #0
 8003876:	4630      	mov	r0, r6
 8003878:	f7fc fcaa 	bl	80001d0 <memchr>
 800387c:	b108      	cbz	r0, 8003882 <_printf_i+0x1e6>
 800387e:	1b80      	subs	r0, r0, r6
 8003880:	6060      	str	r0, [r4, #4]
 8003882:	6863      	ldr	r3, [r4, #4]
 8003884:	6123      	str	r3, [r4, #16]
 8003886:	2300      	movs	r3, #0
 8003888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800388c:	e7aa      	b.n	80037e4 <_printf_i+0x148>
 800388e:	6923      	ldr	r3, [r4, #16]
 8003890:	4632      	mov	r2, r6
 8003892:	4649      	mov	r1, r9
 8003894:	4640      	mov	r0, r8
 8003896:	47d0      	blx	sl
 8003898:	3001      	adds	r0, #1
 800389a:	d0ad      	beq.n	80037f8 <_printf_i+0x15c>
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	079b      	lsls	r3, r3, #30
 80038a0:	d413      	bmi.n	80038ca <_printf_i+0x22e>
 80038a2:	68e0      	ldr	r0, [r4, #12]
 80038a4:	9b03      	ldr	r3, [sp, #12]
 80038a6:	4298      	cmp	r0, r3
 80038a8:	bfb8      	it	lt
 80038aa:	4618      	movlt	r0, r3
 80038ac:	e7a6      	b.n	80037fc <_printf_i+0x160>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4632      	mov	r2, r6
 80038b2:	4649      	mov	r1, r9
 80038b4:	4640      	mov	r0, r8
 80038b6:	47d0      	blx	sl
 80038b8:	3001      	adds	r0, #1
 80038ba:	d09d      	beq.n	80037f8 <_printf_i+0x15c>
 80038bc:	3501      	adds	r5, #1
 80038be:	68e3      	ldr	r3, [r4, #12]
 80038c0:	9903      	ldr	r1, [sp, #12]
 80038c2:	1a5b      	subs	r3, r3, r1
 80038c4:	42ab      	cmp	r3, r5
 80038c6:	dcf2      	bgt.n	80038ae <_printf_i+0x212>
 80038c8:	e7eb      	b.n	80038a2 <_printf_i+0x206>
 80038ca:	2500      	movs	r5, #0
 80038cc:	f104 0619 	add.w	r6, r4, #25
 80038d0:	e7f5      	b.n	80038be <_printf_i+0x222>
 80038d2:	bf00      	nop
 80038d4:	08004179 	.word	0x08004179
 80038d8:	0800418a 	.word	0x0800418a

080038dc <memmove>:
 80038dc:	4288      	cmp	r0, r1
 80038de:	b510      	push	{r4, lr}
 80038e0:	eb01 0402 	add.w	r4, r1, r2
 80038e4:	d902      	bls.n	80038ec <memmove+0x10>
 80038e6:	4284      	cmp	r4, r0
 80038e8:	4623      	mov	r3, r4
 80038ea:	d807      	bhi.n	80038fc <memmove+0x20>
 80038ec:	1e43      	subs	r3, r0, #1
 80038ee:	42a1      	cmp	r1, r4
 80038f0:	d008      	beq.n	8003904 <memmove+0x28>
 80038f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038fa:	e7f8      	b.n	80038ee <memmove+0x12>
 80038fc:	4402      	add	r2, r0
 80038fe:	4601      	mov	r1, r0
 8003900:	428a      	cmp	r2, r1
 8003902:	d100      	bne.n	8003906 <memmove+0x2a>
 8003904:	bd10      	pop	{r4, pc}
 8003906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800390a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800390e:	e7f7      	b.n	8003900 <memmove+0x24>

08003910 <_sbrk_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4d06      	ldr	r5, [pc, #24]	@ (800392c <_sbrk_r+0x1c>)
 8003914:	2300      	movs	r3, #0
 8003916:	4604      	mov	r4, r0
 8003918:	4608      	mov	r0, r1
 800391a:	602b      	str	r3, [r5, #0]
 800391c:	f7fd f8be 	bl	8000a9c <_sbrk>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_sbrk_r+0x1a>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	b103      	cbz	r3, 800392a <_sbrk_r+0x1a>
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	2000065c 	.word	0x2000065c

08003930 <_realloc_r>:
 8003930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003934:	4680      	mov	r8, r0
 8003936:	4615      	mov	r5, r2
 8003938:	460c      	mov	r4, r1
 800393a:	b921      	cbnz	r1, 8003946 <_realloc_r+0x16>
 800393c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003940:	4611      	mov	r1, r2
 8003942:	f7ff bc59 	b.w	80031f8 <_malloc_r>
 8003946:	b92a      	cbnz	r2, 8003954 <_realloc_r+0x24>
 8003948:	f7ff fbea 	bl	8003120 <_free_r>
 800394c:	2400      	movs	r4, #0
 800394e:	4620      	mov	r0, r4
 8003950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003954:	f000 f81a 	bl	800398c <_malloc_usable_size_r>
 8003958:	4285      	cmp	r5, r0
 800395a:	4606      	mov	r6, r0
 800395c:	d802      	bhi.n	8003964 <_realloc_r+0x34>
 800395e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003962:	d8f4      	bhi.n	800394e <_realloc_r+0x1e>
 8003964:	4629      	mov	r1, r5
 8003966:	4640      	mov	r0, r8
 8003968:	f7ff fc46 	bl	80031f8 <_malloc_r>
 800396c:	4607      	mov	r7, r0
 800396e:	2800      	cmp	r0, #0
 8003970:	d0ec      	beq.n	800394c <_realloc_r+0x1c>
 8003972:	42b5      	cmp	r5, r6
 8003974:	462a      	mov	r2, r5
 8003976:	4621      	mov	r1, r4
 8003978:	bf28      	it	cs
 800397a:	4632      	movcs	r2, r6
 800397c:	f7ff fbc2 	bl	8003104 <memcpy>
 8003980:	4621      	mov	r1, r4
 8003982:	4640      	mov	r0, r8
 8003984:	f7ff fbcc 	bl	8003120 <_free_r>
 8003988:	463c      	mov	r4, r7
 800398a:	e7e0      	b.n	800394e <_realloc_r+0x1e>

0800398c <_malloc_usable_size_r>:
 800398c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003990:	1f18      	subs	r0, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	bfbc      	itt	lt
 8003996:	580b      	ldrlt	r3, [r1, r0]
 8003998:	18c0      	addlt	r0, r0, r3
 800399a:	4770      	bx	lr

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
